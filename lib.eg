
exports.StructFactory := {name} ->
   make{} =
      r = Array.prototype.slice.call{arguments, 0}
      r["#"] := name
      r
   make.___project := {value} ->
      cond:
         [value instanceof Array and value["#"] == name] =>
            {true, value}
         true =>
            {true, make{value}}
   make


exports.Struct := {name} ->
   r = Array.prototype.slice.call{arguments, 1}
   r["#"] := name
   r

exports.Struct.___check := {value} ->
   cond:
      [value instanceof Array] => value["#"] !== undefined
      true => false

exports.Struct.___deconstruct := {value} ->
   cond:
      [value instanceof Array and value["#"] !== undefined] ->
         {value["#"]}.concat{value.slice{0}}
      true => throw "cannot deconstruct"



pr{x} =
   r = repr{x}
   pre = String.fromCharCode{27} + "[?0;7y+h <div class=\"ug\">"
   post = "</div>" + String.fromCharCode{7}
   console.log with [pre + r + post]
exports.pr := pr


[cls /// contents] =
   contents |>
      String? -> "<span class=\"" + cls + "\">" + contents + "</span>"
      other -> "<span class=\"" + cls + "\">" + contents.join{""} + "</span>"

repr{x} =
   x |>
      true? -> .special /// [.true /// "true"]
      false? -> .special /// [.false /// "false"]
      null? -> .special /// [.nil /// "null"]
      undefined? -> .special /// [.nil /// "undefined"]
      Number? -> .num /// String{x}
      String? -> .str /// x
      entries ->
         tag = entries"#"
         tag |>
            undefined? ->
               .sequence /// entries.map{{x} -> repr{x}}
            other ->
               .struct /// {.sym /// tag, .sequence /// entries.map{{x} -> repr{x}}}
exports.repr := repr



exports.send := {obj, msg} ->
   msg |>
      [String? or Number?] -> obj[msg]
      other -> obj.___send{msg}

Function.prototype.___send := {args} ->
   this.apply{this, args}


exports.checker := {type} ->
   type.___check |>
      undefined? ->
         {value} -> value instanceof type
      f ->
         {value} -> f{value}



exports.projector := {type} -> {value} ->
   type.___project |>
      undefined? ->
         cond:
            [value instanceof type] => {true, value}
            true => {false, null}
      f -> f{value}

Array.___project := {value} -> value |>
   Array? -> {true, value}
   _ -> {true, {value}}



exports.deconstructor := {type} -> {value} ->
   type.___deconstruct |>
      undefined? ->
         cond:
            [value instanceof Array] => {true, value}
            true => {false, null}
      f -> f{value}

