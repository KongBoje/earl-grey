
'use strict';require('earlgrey-runtime');let m$1;let $targ$0;let $targ$1;let mt$0;let Env$0;let Expander$0;let topscope$0;let stdenv$0;let mac$0;let bind$0;let make_expander$0;mt$0=require("./expand");Env$0=mt$0.Env;Expander$0=mt$0.Expander;topscope$0=mt$0.topscope;stdenv$0=Env$0();mac$0=(function mac(name$0){return (function(m$0){stdenv$0.bind(topscope$0,name$0,["macro",m$0]);return m$0;});});bind$0=(function bind(name$1,value$0){return stdenv$0.bind(topscope$0,name$1,value$0);});m$1=null;$1:for(m$1 of "consts core operators loop quote regexp modularity\n testing misc macrodef async logic".split(RegExp("[\\n ]+",""))){let $5$0;let m$2;m$2=m$1;(($5$0=require(("./macros/"+m$2))),$5$0)(mac$0,bind$0);}make_expander$0=(function make_expander(pipeline$0){let generic_nodes$0;generic_nodes$0=["if","js_while","js_for","js_for_in","js_for_of","js_label","js_break","js_continue","js_return","js_delete","js_throw","js_try","js_new","js_yield"];return Expander$0(stdenv$0.fork(),generic_nodes$0,pipeline$0);});$targ$0=stdenv$0;(exports["stdenv"]=$targ$0);[];$targ$1=make_expander$0;(exports["make_expander"]=$targ$1);[];
