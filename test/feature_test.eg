
requireMacros:
   "earl-mocha" ->
      describe, it, before, after, assert, asserts, expectError


describe "examples":
   it "fibonacci":
      fib{match} =
         0 -> 0
         1 -> 1
         n -> fib{n - 1} + fib{n - 2}
      assert fib{3} === 2
      assert fib{10} === 55


describe "Invariances":
   asserts:
      `a b` == `a[b]`
      `a b` == `[a][b]`
      `a b c` == `a [b c]`
      `a[{x}]` == `a{x}`
      `[[1]]` == `1`
      `a: b` == `a{b}`
      `a b: c` == `a{b, c}`

describe "Arithmetic":
   asserts:
      [1 + 2 * 3] === 7
      [1 * 2 + 3] === 5
      [70 / 10 / 7] === 1
      [2 ** 3 ** 2] === 512

describe "Operator priority":
   asserts:
      `a + b + c` == `[a + b] + c`
      `a * b + c` == `[a * b] + c`
      `a + b * c` == `a + [b * c]`

describe "Conditionals":
   it "if/then/else":
      positivity{x} =
         if [x > 0]:
            then: .positive
            else:
               if [x < 0]:
                  then: .negative
                  else: .zero

      assert positivity{0} === .zero
      assert positivity{11} === .positive
      assert positivity{-41} === .negative

   it "if/elif/else":
      positivity{x} =
         if [x > 0]:
            .positive
         elif [x < 0]:
            .negative
         else:
            .zero

      assert positivity{0} === .zero
      assert positivity{11} === .positive
      assert positivity{-41} === .negative


describe "Pattern matching":

   describe "basic types":

      asserts "String":
         String? "hello"
         not String? 1
         [String! 123] === "123"

      asserts "Number":
         Number? 1
         Number? 7.23e-65
         not Number? "123"
         [Number! "123"] === 123

      asserts "Boolean":
         Boolean? true
         not Boolean? 0
         [Boolean! 0] === false
         [Boolean! 1] === true
         [Boolean! ""] === false
         [Boolean! {}] === true
         [Boolean! "quack"] === true

      asserts "Array":
         Array? {1, 2, 3}
         not Array? 1
         [Array! 1] == {1}
         [Array! {1, 2, 3}] == {1, 2, 3}

      asserts "#struct":
         #data? #data{.a, .b, .c}
         not [#data? #dat{.a, .b, .c}]
         [#data! {1, 2}] == #data{{1, 2}}
         [#data! #data{1, 2}] == #data{1, 2}
         [#data! 1] == #data{1}

   it "match on #struct":
      calc{match} =
         Number? n -> n
         #add{m, n} -> calc{m} + calc{n}
         #sub{m, n} -> calc{m} - calc{n}
         #mul{m, n} -> calc{m} * calc{n}
         #div{m, n} -> calc{m} / calc{n}
         #sub{n} -> -calc{n}
      assert [calc{x} === 10] where
         x = #mul{5, 2}
      assert [calc{x} === -7] where
         x = #div{#add{1, 13}, #sub{2}}

   it "comparisons":
      compare{match, threshold} =
         [> threshold] -> "above"
         [< threshold] -> "below"
         [=== threshold] -> "equal"

      assert compare{-41, 0} === "below"
      assert compare{11, 0} === "above"
      assert compare{9, 9} === "equal"

   describe "destructuring assignment":
      it "simple":
         {{a, b}, c} = {{1, 2}, 3}
         assert [a + b + c] === 6
      it "bounds checks":
         expectError Error:
            let {a} = {11, 22}
         expectError Error:
            let {a, b, c} = {11, 22}

   it "match sub-clauses":
      tr{match} =
         String? s -> s
         Number? n -> String{n}
         #send{f, match} ->
            String? s -> tr{f} + "." + s
            #data{*args} -> tr{f} + "{" + args.join{", "} + "}"
         other -> throw "illegal expression"

      assert tr{x} === "a.b" where x = #send{"a", "b"}
      assert tr{x} === "a{b, 12}" where x = #send{"a", #data{"b", 12}}


describe "Exception handing":
   it "catch":
      assert [null.x and false !! TypeError? -> true]
   it "throw":
      assert
         [throw .hello] !!
            .hello -> true
            other -> false
      assert
         [throw .not_hello] !!
            .hello -> false
            other -> true

describe "Regular expressons":
   before:
      @re = R"ab*a"
   it "test match":
      {"aa", "aba", "abba", "aadvark", "cabbage"} each
         @re? x -> pass
         x -> throw E.failure{x}
   it "test not match":
      {"a", "bachi", "bouzouk"} each
         @re? x -> throw E.failure{x}
         x -> pass

it "chain":
   assert "7654321" ===
      chain {1, 2, 3}:
          @concat with {4, 5}
          @reverse{}
          {7, 6}.concat{@}
          @join{""}


class Person:
   constructor{String? name, Number! age} =
      @name = name
      @age = age
   descr{} =
      @name + ":" + [String! @age]
   descr2{} =
      @descr{}.replace{":", "~"}

describe "class":
   it "one":
      let one = new Person{.peter, 12}
      assert Person? one
      assert one.name === .peter
      assert one.age === 12
      assert one.descr{} === "peter:12"
   it "two":
      let two = Person{.igor, "34"}
      assert Person? two
      assert two.name === .igor
      assert two.age === 34
      assert two.age !== "34"
      assert two.descr2{} === "igor~34"
   it "match constructor":
      expectError Error: Person{12, 12}
   asserts "misc":
      not Person? {.peter, 12}
      not Person? {name = .peter, age = 12}
