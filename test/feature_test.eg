
require:
   "../lib/pp" ->
      <>


results = blocktest:

   "Operator priority" =>
      [1 + 2 * 3] === 7
      [1 * 2 + 3] === 5
      [70 / 10 / 7] === 1
      [2 ** 3 ** 2] === 512

   "Fibonacci" =>
      do:
         fib{match} =
            0 -> 0
            1 -> 1
            n -> fib{n - 1} + fib{n - 2}

      fib{3} === 2
      fib{10} === 55

   "Conditionals" =>
      do:
         positivity{x} =
            if [x > 0]:
               then: .positive
               else:
                  if [x < 0]:
                     then: .negative
                     else: .zero

      positivity{0} === .zero
      positivity{11} === .positive
      positivity{-41} === .negative

   "Pattern matching" =>

      "Comparison operators" =>
         do:
            compare{match, threshold} =
               [> threshold] -> "above"
               [< threshold] -> "below"
               [=== threshold] -> "equal"

         compare{-41, 0} === "below"
         compare{11, 0} === "above"
         compare{9, 9} === "equal"

      "Match on #struct" =>
         do:
            calc{match} =
               Number? n -> n
               #add{m, n} -> calc{m} + calc{n}
               #sub{m, n} -> calc{m} - calc{n}
               #mul{m, n} -> calc{m} * calc{n}
               #div{m, n} -> calc{m} / calc{n}
               #sub{n} -> -calc{n}

         [calc{x} === 10] where x = #mul{5, 2}
         [calc{x} === -7] where x = #div{#add{1, 13}, #sub{2}}

      "Argument deconstruction" =>
         do: {{a, b}, c} = {{1, 2}, 3}
         [a + b + c] === 6
         "Bounds checks" =>
            [let {a} = {11, 22}, false] !! e -> true
            [let {a, b, c} = {11, 22}, false] !! e -> true

      "Sub-clauses with match" =>
         do:
            tr{match} =
               String? s -> s
               Number? n -> String{n}
               #send{f, match} ->
                  String? s -> tr{f} + "." + s
                  #data{*args} -> tr{f} + "{" + args.join{", "} + "}"
               other -> throw "illegal expression"

         tr{x} === "a.b" where x = #send{"a", "b"}
         tr{x} === "a{b, 12}" where x = #send{"a", #data{"b", 12}}

   "Testing for type" =>
      "String" =>
         String? "abc"
         not [String? 123]
      "Number" =>
         Number? 123
         Number? 7.23e-65
         not [Number? "123"]
      "Array" =>
         Array? {1, 2, 3}
      "#struct" =>
         ;; Struct? #data{.a, .b, .c}
         ;; not Struct? {.a, .b, .c}
         #data? #data{.a, .b, .c}
         not [#data? #dat{.a, .b, .c}]

   "Coercion" =>
      "String" =>
         [String! 123] === "123"
      "Number" =>
         [Number! "123"] === 123
         [Number! "123.5e3"] === 123.5e3
      "Array" =>
         match [Array! .hello]: {.hello} -> true
         match [Array! {.hello}]: {.hello} -> true
      "#struct" =>
         match [#data! {1, 2}]: #data{{1, 2}} -> true
         match [#data! #data{1, 2}]: #data{1, 2} -> true
         match [#data! 1]: #data{1} -> true

   "Exception handling" =>
      true !! e -> false
      ;; var_doesnt_exist !! e -> true
      ;; var_doesnt_exist !! ReferenceError? -> true
      null.x !! e -> true
      [throw .hello] !!
         .hello -> true
         other -> false
      [throw .not_hello] !!
         .hello -> false
         other -> true

   "Regular expressions" =>

      do:
         var re = R"ab*a"
      [{...} each s -> re? s] with
         "aa", "aba", "abba", "aadvark", "cabbage"
      [{...} each s -> not re? s] with
         "a", "bachi", "bouzouk"
      "cabbage".replace{re, "arria"} === "carriage"

      do:
         re = R`[start, +"a", {+"b"}, "a", end]`
      ;; TODO: REACTIVATE
      ;; [{...} each re! {_, s} -> R"b+"? s] with
      ;;    "abba", "abbbbbba", "aaaaaba"
      [{...} each s -> not re? s] with
         "cabbage", "labia"

   "Chaining" =>

      "7654321" ===
         chain {1, 2, 3}:
             @concat with {4, 5}
             @reverse{}
             {7, 6}.concat{@}
             @join{""}

      ;; "7654321" ===
      ;;    chain [{1, 2, 3} as /]:
      ;;        /concat with {4, 5}
      ;;        /reverse{}
      ;;        {7, 6}.concat{/}
      ;;        /join{""}

   "Classes" =>
      do:
         class Person:
            constructor{String? name, Number! age} =
               @name = name
               @age = age
            describe{} =
               @name + ":" + [String! @age]
            describe2{} =
               @describe{}.replace{":", "~"}

      do: one = new Person{.peter, 12}
      Person? one
      one.name === .peter
      one.age === 12
      one.describe{} === "peter:12"

      do: two = Person{.igor, "34"}
      Person? two
      two.name === .igor
      two.age === 34
      two.age !== "34"
      two.describe2{} === "igor~34"

      Person{12, 12} and false !! e -> true
      not Person? {.peter, 12}

yay = 0
nay = 0

<> results each
   #test_result{label, #success{value}} -> [yay++, true]
   #test_result{label, other} ->
      nay++
      {label.join{" / "}, other}
   other -> [nay++, other]

<> {"Yay", yay}
<> {"Nay", nay}



