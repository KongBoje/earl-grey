

results = blocktest:

   "Operator priority" =>
      [1 + 2 * 3] == 7
      [1 * 2 + 3] == 5
      [70 / 10 / 7] == 1
      [2 ** 3 ** 2] == 512

   "Fibonacci" =>
      do:
         fib{|>} =
            0 -> 0
            1 -> 1
            n -> fib{n - 1} + fib{n - 2}

      fib{3} == 2
      fib{10} == 55

   "Conditionals" =>
      do:
         positivity{x} =
            cond:
               [x > 0] => .positive
               [x < 0] => .negative
               [x == 0] => .zero

      positivity{0} == .zero
      positivity{11} == .positive
      positivity{-41} == .negative

   "Pattern matching" =>

      "Comparison operators" =>
         do:
            compare{|>, threshold} =
               [> threshold] -> "above"
               [< threshold] -> "below"
               [== threshold] -> "equal"

         compare{-41, 0} == "below"
         compare{11, 0} == "above"
         compare{9, 9} == "equal"

      "Match on #struct" =>
         do:
            calc{|>} =
               Number? n -> n
               #add{m, n} -> calc{m} + calc{n}
               #sub{m, n} -> calc{m} - calc{n}
               #mul{m, n} -> calc{m} * calc{n}
               #div{m, n} -> calc{m} / calc{n}
               #sub{n} -> -calc{n}

         [calc{x} == 10] where x = #mul{5, 2}
         [calc{x} == -7] where x = #div{#add{1, 13}, #sub{2}}

      "Argument deconstruction" =>
         do: {{a, b}, c} = {{1, 2}, 3}
         [a + b + c] == 6

      "Sub-clauses with |>" =>
         do:
            tr{|>} =
               String? s -> s
               Number? n -> String{n}
               #send{f, |>} ->
                  String? s -> tr{f} + "." + s
                  #data{*args} -> tr{f} + "{" + args.join{", "} + "}"
               other -> throw "illegal expression"

         tr{x} == "a.b" where x = #send{"a", "b"}
         tr{x} == "a{b, 12}" where x = #send{"a", #data{"b", 12}}


<> results each
   #test_result{label, #success{value}} -> value
   #test_result{label, other} -> {label.join{" / "}, other}
   other -> other
