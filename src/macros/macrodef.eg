
require:
   "../location" ->
      <<:
   "../expand" ->
      Env, topscope
   "./helpers" ->
      ctx_mac, expr_mac2

inject: mac

;;;;;;;;;;;;
;; MACROS ;;
;;;;;;;;;;;;

wrap_macro{info, mac} =
   mac2{c, s, f, e} =
      bindings = info.env.list_bindings{info.scope}
      env = Env{}
      env.scopes[topscope.name] = bindings
      r = mac.call{info, c, s, f, e}
      env.mark{r}
   #macro{mac2}

wrap_macro_func{info, args, body} =
   it = info.env.mark{`@`}
   `_lambda{^args, ^it = this, ^body, ^=null}`


mac{"inlineMacro"}! imacro_mac{context, info, form, match} =
   #data{#send{name and [#symbol{sym} or #value{sym}], arguments}, ast} ->
      let mac = info.go{wrap_macro_func{info, arguments, ast}, .parse, .eval}
      s = info.mark{#symbol{sym} &: {env = name.env}} <<: name
      #declare_raw{s, wrap_macro{info, expr_mac2{mac}}}

mac{"inlineCmacro"}! icmacro_mac{context, info, form, match} =
   #data{#send{name and [#symbol{sym} or #value{sym}], arguments}, ast} ->
      let mac = info.go{wrap_macro_func{info, arguments, ast}, .parse, .eval}
      s = info.mark{#symbol{sym} &: {env = name.env}} <<: name
      #declare_raw{s, wrap_macro{info, ctx_mac{mac}}}

mac{"macros"}! macros_mac{context, info, form and {=> env}, #data{body}} =
   the_macros = info.go{body, .parse, .eval}
   #splice{*macs} where macs =
      items{the_macros} each {k, v} ->
         #declare_raw{#symbol{k} &: {env = env}, #macro{f}} where
            f{ctx, info, form, expr} =
               v.call{info, expr}


mac{"macro"}! macro_mac = mak{{}} where
   mak{tosave}{match, info, form, expr} =
      when expr == #void{} ->
         #nostep{form}
      #pattern ->
         #project{#macro{mac}, expr, true} where mac{*blah, #data{match}} =
            #use{env, x} ->
               #use{env, mac.call{this, #data{x}}}
            `^args -> ^body` ->
               e = wrap_macro_func{info, args, body}
               #multi{`tmp = ^e`
                      `tmp.__deps and deps = {=}`
                      *provides
                      `tmp.__path = __filename`
                      `tmp`} where
                  provides = tosave each sym and #symbol{name} ->
                     `provide{^sym as ^exp}, deps[^=name] = ^=expn` where
                        expn = "__mdep_" + name
                        exp = #symbol{expn}
      match is expr ->
         #data{*tosave} ->
            #macro with mak{tosave}
