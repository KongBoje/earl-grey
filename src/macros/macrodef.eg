
require:
   "../location" ->
      <<:
   "../expand" ->
      Env, topscope
   "./helpers" ->
      ctx_mac, expr_mac2

inject: mac

;;;;;;;;;;;;
;; MACROS ;;
;;;;;;;;;;;;

wrap_macro{info, mac} =
   mac2{c, s, f, e} =
      bindings = info.env.list_bindings{info.scope}
      env = Env{}
      env.scopes[topscope.name] = bindings
      r = mac.call{info, c, s, f, e}
      env.mark{r}
   #macro{mac2}

wrap_macro_func{info, args, body} =
   it = info.env.mark{`@`}
   `_lambda{^args, ^it = this, ^body, ^=null}`


mac{"macro"}! macro_mac{context, info, form, match} =
   #data{#send{name and [#symbol{sym} or #value{sym}], arguments}, ast} ->
      let mac = info.go{wrap_macro_func{info, arguments, ast}, .parse, .eval}
      s = info.mark{#symbol{sym} &: {env = name.env}} <<: name
      #declare_raw{s, wrap_macro{info, expr_mac2{mac}}}

mac{"cmacro"}! cmacro_mac{context, info, form, match} =
   #data{#send{name and [#symbol{sym} or #value{sym}], arguments}, ast} ->
      let mac = info.go{wrap_macro_func{info, arguments, ast}, .parse, .eval}
      s = info.mark{#symbol{sym} &: {env = name.env}} <<: name
      #declare_raw{s, wrap_macro{info, ctx_mac{mac}}}

mac{"macros"}! macros_mac{context, info, form and {=> env}, #data{body}} =
   the_macros = info.go{body, .parse, .eval}
   #splice{*macs} where macs =
      items{the_macros} each {k, v} ->
         #declare_raw{#symbol{k} &: {env = env}, #macro{f}} where
            f{ctx, info, form, expr} =
               v.call{info, expr}



mac{"oldmacro"}! oldmacro_mac{context, info, form, match} =
   #data{#send{name and #symbol{sym}, arguments}, ast} ->
      let mac = info.go{`^arguments -> ^ast`, .parse, .eval}
      #declare_raw{name, wrap_macro{info, mac}}
