
require:
   "../location" ->
      <<:
   "./helpers" ->
      expr_mac
      pattern_handlers
      ctx_mac
      named_statement_matcher
      flatmacro
      match_error
      Body
      AssignmentHandler
   "../pattern" ->
      PatternCompiler
      parse_clauses


inject: mac


mac{"var"}! var_mac{#pattern, _, form, argument} =
   #mode{.var, argument}

mac{"set"}! set_mac{#pattern, _, form, argument} =
   #mode{.set, argument}

mac{"let"}! let_mac{match, _, form, argument} =
   #pattern ->
      #mode{.let, argument}
   other ->
      match argument:
         #data{Body! {*bindings}, body} ->
            construct{match} =
               {} -> body
               {`^bind = ^val`, *xs} ->
                  #multi{`let ^bind = ^val`, construct{xs}} & {nonrecursive = true}
            construct{bindings}

expr_mac! mac{"letrec"}! letrec_mac{_, form, #data{Body! {*bindings}, body}} =
   #multi{*let_bindings, body} where
      let_bindings = bindings each `^b = ^v` -> `let ^b = ^v`

mac{"where"}! where_mac{context, _, form, #data{body, bindings}} =
   `letrec{^bindings, ^body}`

mac{"."}! dot_mac{context, _, form, #data{#void{}, expr}} =
   f{expr} where f{match} =
      #symbol{x} ->
         #value{x}
      #data{*args} ->
         #data{*[args each arg -> f{arg}]}
      other ->
         throw E.syntax.dot{"Argument to '.' must be a symbol or an array"
                            {argument = other}}

mac{"="}! equal_mac{match, info, form, expr} =
   #pattern ->
      #data{lhs, rhs} = expr
      #default{lhs, rhs}
   #expr{.data} ->
      match expr:
         #void{} ->
            #assoc{}
         #data{#symbol{s}, rhs} ->
            ;; special case for the most common situation
            #assoc{#value{s}, rhs}
         #data{lhs, rhs} ->
            #objsplice with #multi with
               PatternCompiler{lhs, info, opt}.extract_from_rhs{rhs2} where
                  opt = pattern_handlers.build_object
                  rhs2 = #use{info.scope, rhs} <<: rhs
   other ->
      #data{lhs, rhs} = expr
      pc = PatternCompiler{lhs, info, opt} where
         opt = pattern_handlers.declare_variables
      assignment = pc.extract_from_rhs{rhs2} where
         rhs2 = #use{info.scope, rhs} <<: rhs
      rval = match pc.vars:
         {v} -> v
         vs -> #data{*vs}
      pc.wrapAssignment{expr} where
         expr = #splice{assignment, rval}

mac{"=>"}! fat_arrow_mac{match, {=> env}, _, #data{lhs, rhs}} =
   #pattern ->
      match {lhs, rhs}:
         {#void, #symbol{k} or #value{k}} ->
            #assoc{#value{k}, [#symbol{k} <<: rhs] & {env = env}}
         {#symbol{k} or #value{k}, rhs} ->
            #assoc{#value{k}, rhs}
   #test ->
      Body! {*stmts} = rhs
      #blocktest{lhs, stmts}
   other ->
      #assoc{lhs, rhs}

mac{"_lambda"}! _lambda_mac{context, info, form, match} =
   #data{#data{*args} and arg, pre, body, post, generator = #value{false}} ->
      wrap{body2} =
         if{pre == #value{null}, body3, #multi{pre, body3}} where
            body3 = if{post == #value{null}, body2, #multi{body2, post}}

      pc = PatternCompiler{arg, info} with
         pattern_handlers.declare_variables & {
            indexable = true
            allow_nested = true
            fallback{target} =
               match_error{target}
            tags = {declare_mode = .let}
         }
      cpattern = pc.compile{}

      match cpattern:
         #array_pattern{fw, {}, {}, undefined?} ->
            decls = {}
            newargs = zip{fw, args} each {match, arg} ->
               #assign{expr and #symbol{v}} ->
                  expr
               other ->
                  newv = #symbol{info.gensym{.temp}} & {env = info.mkenv{}}
                  pc2 = pc.fork{other}
                  decls.push with pc2.extract_from_rhs{newv}
                  newv
            _body = pc.wrapBody{body}
            #lambda{newargs, wrap{#multi{*decls, _body}}, generator}
         other ->
            a = `arguments` <<: arg
            #lambda{{}, wrap{body2}, generator} where
               body2 = `match.indexable [^a]: ^arg -> ^body`

mac{"*->"}! genarrow_mac{ctx, _, form, match} =
   #data{args, body} ->
      `_lambda{^args, ^=null, ^body, ^=null, ^=true}`
   other ->
      throw E.syntax.lambda{"Bad lambda syntax", {node = other}}

mac{"->"}! arrow_mac{match, _, form, expr} =
   do:
      if form.name:
         console.log with form.name
   #clause ->
      #data{lhs, rhs} = expr
      #clause{lhs, rhs}
   other ->
      match expr:
         #data{args, body} ->
            `_lambda{^args, ^=null, ^body, ^=null}`
         other ->
            throw E.syntax.lambda{"Bad lambda syntax", {node = other}}


try_pattern = #seq{#multiple{_catch}, #multiple{_finally, 0, 1}} where
   _catch = named_statement_matcher{.catch}
   _finally = named_statement_matcher{.finally}

mac{"try"}! try_mac{#expr{.multi}, info, form, #data{body}} =
   flatmacro{try_pattern} with
      {#seq{#multiple{*catches}, #multiple{*finallies}}} ->
         env = info.mkenv{}
         clauses = {}
         var finally = #void{}
         catches each `catch{^p, ^body}` ->
            clauses.push with
               env.mark with `^p -> ^body`
         finallies each `finally{^body}` ->
            finally = body
         clauses.push with
            env.mark{`e -> throw e`}
         make_ebody{wrap} =
            parse_clauses with
               info, `excv`, clauses
               {wrap = wrap}
         #macro{m} where ctx_mac! m{match, e} =
            #expr{.multi} ->
               #nostep{this.form}
            #expr{.ignore} ->
               #js_try{body, `{excv} -> ^make_ebody{{x} -> x}`, finally}
            #expr{.expr} ->
               trystmt = #js_try{
                  `set rval = ^body`
                  ```{excv} -> ^make_ebody{{x} -> `set rval = ^x`}```
                  finally
               }
               `[var rval = false
                 ^trystmt
                 rval]`

mac{"!!"}! tryop_mac{match, info, form, #data{expr, Body! {*clauses}}} =
   #expr{.multi} ->
      #nostep{form}
   #expr{.ignore} ->
      clauses.push with
         info.mkenv{}.mark{`e -> throw e`}
      parsed_clauses =
         parse_clauses with
            info, `excv`, clauses
            {wrap = {x} -> x}
      #js_try{expr, `{excv} -> ^parsed_clauses`, #void{}}
   other ->
      clauses.push with
         info.mkenv{}.mark{`e -> throw e`}
      parsed_clauses =
         parse_clauses with
            info, `excv`, clauses
            {wrap = {x} -> `set rval = ^x`}
      trystmt = #js_try{`set rval = ^expr`, `{excv} -> ^parsed_clauses`, #void{}}
      `let [var rval = false]: [^trystmt, rval]`

expr_mac! mac{"throw"}! throw_mac{_, form, arg} =
   #js_throw{arg}

;; expr_mac! mac{"return"}! return_mac{_, form, arg} =
;;    #js_return{arg}



mac{"get"}! get_mac{match, _, form, arg} =
   #pattern ->
      #special{AssignmentHandler{subp, w}} where
         subp = if{arg == #void{}, null, arg}
         w{ph} = ph

mac{"return"}! return_mac{match, _, form, arg} =
   #pattern ->
      #special{AssignmentHandler{subp, w}} where
         subp = if{arg == #void{}, null, arg}
         w{ph} = `return ^ph`
   #expr{.expr} or #expr{.head} ->
      #js_return{arg}
   otherwise ->
      #nostep{form}

expr_mac! mac{"new"}! new_mac{_, form, arg} =
   #js_new{arg}

mac{"delete"}! delete_mac{context, _, form, match arg} =
   #symbol{s} ->
      #undeclare{arg}
   other ->
      #js_delete{other}

mac{"splice"}! splice_mac{context, _, form, #data{Body! {*stmts}}} =
   #splice{*stmts}

mac{"#"}! hash_mac{context, _, form, #data{#void{}, #symbol{var tag}}} =
   set tag = #value{tag}
   #macro{f} where f{match, _, form, expr} =
      #pattern ->
         checker_mac = #macro with {context, _, form, #data{expr}} ->
            ```let [x = ^expr]: [[instanceof]{x, Array} and x[0] === ^tag]```
         match expr:
            #data{*subp} -> `{^tag, ^*subp}`
            #void{} -> #check{checker_mac, #ignore{}}
            other -> #check{checker_mac, expr}
      #check ->
         `getChecker{{^tag}}`
      #project ->
         `getProjector{{^tag}}`
      _ ->
         match expr:
            #void{} ->
               `{^tag}`
            #data{*args} ->
               `{^tag, ^*args}`
            other ->
               `{^tag}[^other]`

mac{"_"}! placeholder_mac{#pattern, _, form, #void{}} =
   #ignore{}



