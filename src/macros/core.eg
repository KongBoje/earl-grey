
require:
   "../location" ->
      <<:
   "./helpers" ->
      expr_mac
      pattern_handlers
      Body
   "../pattern" ->
      parse_pattern
      PatternParser
      parse_clauses
   "../util" as util ->
      classify_contiguous


inject: mac


mac{"var"}! var_mac{#pattern, _, form, argument} =
   #mode{.var, argument}

mac{"set"}! set_mac{#pattern, _, form, argument} =
   #mode{.set, argument}

mac{"let"}! let_mac{match, _, form, argument} =
   #pattern ->
      #mode{.let, argument}
   other ->
      match argument:
         #data{Body! {*bindings}, body} ->
            construct{match} =
               {} -> body
               ;; {x, *xs} ->
               ;;    #multi{x, construct{xs}} & {nonrecursive = true}
               {'[^bind = ^val], *xs} ->
                  #multi{'[let ^bind = ^val], construct{xs}} & {nonrecursive = true}
            construct{bindings}
            ;; #multi{*bindings, body} & {nonrecursive = true}

expr_mac! mac{"letrec"}! letrec_mac{_, form, #data{Body! {*bindings}, body}} =
   #multi{*let_bindings, body} where
      let_bindings = bindings each '[^b = ^v] -> '[let ^b = ^v]

mac{"where"}! where_mac{context, _, form, #data{body, bindings}} =
   'letrec{^bindings, ^body}

mac{"."}! dot_mac{context, _, form, #data{#void{}, expr}} =
   f{expr} where f{match} =
      #symbol{x} ->
         #value{x}
      #data{*args} ->
         #data{*[args each arg -> f{arg}]}
      other ->
         throw E.syntax.dot{"Argument to '.' must be a symbol or an array"
                            {argument = other}}

mac{"="}! equal_mac{match, info, form, expr} =
   #pattern ->
      #data{lhs, rhs} = expr
      #default{lhs, rhs}
   #expr{.data} ->
      match expr:
         #void{} ->
            #assoc{}
         #data{#symbol{s}, rhs} ->
            ;; special case for the most common situation
            #assoc{#value{s}, rhs}
         #data{lhs, rhs} ->
            #objsplice with #multi with
               parse_pattern{info, lhs, #use{info.scope, rhs} <<: rhs} with
                  pattern_handlers.build_object
   other ->
      #data{lhs, rhs} = expr
      parse_pattern{info, lhs, #use{info.scope, rhs} <<: rhs} with
         pattern_handlers.declare_variables

mac{"=>"}! fat_arrow_mac{match, {=> env}, _, #data{lhs, rhs}} =
   #pattern ->
      match {lhs, rhs}:
         {#void, #symbol{k} or #value{k}} ->
            #assoc{#value{k}, [#symbol{k} <<: rhs] & {env = env}}
         {#symbol{k} or #value{k}, rhs} ->
            #assoc{#value{k}, rhs}
   #test ->
      Body! {*stmts} = rhs
      #blocktest{lhs, stmts}
   other ->
      #assoc{lhs, rhs}

mac{"_lambda"}! _lambda_mac{context, info, form, match} =
   #data{#data{*args} and arg, pre, body, post, generator = #value{false}} ->
      wrap{body2} =
         if{pre == #value{null}, body3, #multi{pre, body3}} where
            body3 = if{post == #value{null}, body2, #multi{body2, post}}
      pp = PatternParser{info, arg, {...}} with
         indexable = true
         allow_nested = true
      match pp.pattern:
         #array_pattern{fw, {}, {}, undefined?} -> ;; when not pp.specials.match ->
            decls = if{pp.specials.match, {#declare{'ph}}, {}}
            newargs = zip{fw, args} each {match, arg} ->
               #assign{expr and #symbol{v}} ->
                  expr
               other ->
                  ;; newv = #symbol{info.gensym{.temp}} & {env = stdenv}
                  newv = #symbol{info.gensym{.temp}} & {env = info.mkenv{}}
                  decls.push with
                     parse_pattern{info, arg, newv} with
                        pattern_handlers.declare_variables & {
                           tags = {declare_mode = .let}
                           special = {#special{match} and expr, value} ->
                              .match ->
                                 #assign{'ph}
                              other ->
                                 throw E.syntax.pattern.special with
                                    "Special token cannot be used here"
                                    {special = expr}
                        }
                  newv
            #lambda{newargs, wrap{#multi{*decls, ...}}, generator} with
               if pp.specials.match:
                  then: '[match ph: ^body]
                  else: body
         other ->
            a = 'arguments <<: arg
            #lambda{{}, wrap{body2}, generator} where
               body2 = ' | match.indexable [^a]:
                            ^arg -> ^body

mac{"*->"}! genarrow_mac{ctx, _, form, match} =
   #data{args, body} ->
      '_lambda{^args, ^=null, ^body, ^=null, ^=true}
   other ->
      throw E.syntax.lambda{"Bad lambda syntax", {node = other}}

mac{"->"}! arrow_mac{match, _, form, expr} =
   do:
      if form.name:
         console.log with form.name
   #clause ->
      #data{lhs, rhs} = expr
      #clause{lhs, rhs}
   other ->
      match expr:
         #data{args, body} ->
            '_lambda{^args, ^=null, ^body, ^=null}
         other ->
            throw E.syntax.lambda{"Bad lambda syntax", {node = other}}


mac{"try"}! try_mac{match, info, form, #data{Body! {*parts}}} =
   do:
      grouped = classify_contiguous{parts} with {match} ->
         '[finally: ^b] -> .finally
         '[^e -> ^b] -> .clause
         other -> .stmt
      {stmts, clauses, finally} = match grouped:
         {#stmt{*a}, #clause{*b}, #finally{'[finally: ^c]}} ->
            {a, b, c}
         {#stmt{*a}, #clause{*b}} ->
            {a, b, null}
         {#stmt{*a}, #finally{'[finally: ^c]}} ->
            {a, {}, c}
         otherwise ->
            throw E.syntax.try{msg, {node = form}} where
               msg = {"try expects a list of statements"
                      "and one or more catch clauses and/or"
                      "a finally clause"}.join{" "}

   #expr{.multi} ->
      #nostep{form}
   #expr{.ignore} ->
      clauses.push with
         info.mkenv{}.mark{'[e -> throw e]}
      #js_try{#multi{*stmts}, ..., finally or #void{}} with
         ' | {excv} ->
              ^ | parse_clauses with
                   info, 'excv, clauses
                   {wrap = {x} -> x}
   other ->
      clauses.push with
         info.mkenv{}.mark{'[e -> throw e]}
      ' | let [var rval = false]:
           ^ #js_try{'[set rval = ^[#multi{*stmts}]], ..., finally or #void{}} with
              ' | {excv} ->
                   ^ | parse_clauses with
                        info, 'excv, clauses
                        {wrap = {x} -> '[set rval = ^x]}
           rval

mac{"!!"}! tryop_mac{match, info, form, #data{expr, Body! {*clauses}}} =
   #expr{.multi} ->
      #nostep{form}
   #expr{.ignore} ->
      clauses.push with
         info.mkenv{}.mark{'[e -> throw e]}
      #js_try{expr, ..., #void{}} with
         ' | {excv} ->
              ^ | parse_clauses with
                   info, 'excv, clauses
                   {wrap = {x} -> x}
   other ->
      clauses.push with
         info.mkenv{}.mark{'[e -> throw e]}
      ' | let [var rval = false]:
           ^ #js_try{'[set rval = ^expr], ..., #void{}} with
              ' | {excv} ->
                   ^ | parse_clauses with
                        info, 'excv, clauses
                        {wrap = {x} -> '[set rval = ^x]}
           rval

expr_mac! mac{"throw"}! throw_mac{_, form, arg} =
   #js_throw{arg}

expr_mac! mac{"return"}! return_mac{_, form, arg} =
   #js_return{arg}

expr_mac! mac{"new"}! new_mac{_, form, arg} =
   #js_new{arg}

mac{"delete"}! delete_mac{context, _, form, match arg} =
   #symbol{s} ->
      #undeclare{arg}
   other ->
      #js_delete{other}

mac{"splice"}! splice_mac{context, _, form, #data{Body! {*stmts}}} =
   #splice{*stmts}

mac{"#"}! hash_mac{context, _, form, #data{#void{}, #symbol{var tag}}} =
   set tag = #value{tag}
   #macro{f} where f{match, _, form, expr} =
      #pattern ->
         checker_mac = #macro with {context, _, form, #data{expr}} ->
            ' | let [x = ^expr]:
                 [[instanceof]{x, Array} and x[0] === ^tag]
         match expr:
            #data{*subp} -> '{^tag, ^*subp}
            #void{} -> #check{checker_mac, #ignore{}}
            other -> #check{checker_mac, expr}
      #check ->
         'getChecker{{^tag}}
      #project ->
         'getProjector{{^tag}}
      _ ->
         match expr:
            #void{} ->
               '{^tag}
            #data{*args} ->
               '{^tag, ^*args}
            other ->
               '{^tag}[^other]

mac{"_"}! placeholder_mac{#pattern, _, form, #void{}} =
   #ignore{}



