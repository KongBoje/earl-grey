
require:
   "../lex" -> unescape
   "../location" -> Source
   "./helpers" ->
      qq, overridable
   opg
   ;; quaint

inject: mac

;;;;;;;;;;;
;; QUOTE ;;
;;;;;;;;;;;

mac{"`"}! quote_mac{match context, info, form, expr and #value{s}} =
   do:
      parsed = info.go{Source{s, "<quasiquote>"}, .source, .parse}
   ;; #expr ->
   ;;    info.mark{`^qq{parsed, true} &: {ast = true}`}
   else ->
      info.mark{qq{parsed}}


;;;;;;;;;;;;;;;;;
;; INTERPOLATE ;;
;;;;;;;;;;;;;;;;;

tok = opg.tokenize.Tokenizer with {
   regexps = {
      open = "\\$[.A-Za-z0-9_]*\\{|\\{"
      close = "\\}"
      other = "\\$|[^\\{\\}$]+"
   }
   post = {
      {match tok} ->
         {type => .open} ->
            ;; Insert a dummy token before {
            ;; The dummy token serves as a kind of wedge between } and { in '{x}{y}'
            ;; Without that token, {y} will be the right hand side of {x} and that's
            ;; a pain to deal with.
            {{token = "", type = .other, location = tok.location.at_start{}}, tok}
         else ->
            tok
   }
}

gr = new opg.parse.TokenGroups with {
    open = {"open"}
    close = {"close"}
    other = {"str", "other"}
}

prio = new opg.parse.PriorityOrder{gr} with {
    open = {left = 1002, right = 0}
    close = {left = 0, right = 1003}
    other = {left = 1000, right = 1000}
}

finalize{match zazz} =
   {null?
    {type => "open", token => [match open]}
    _arg
    {type => "close", token => close}
    null?} ->
      do:
         let arg = _arg or #join{""} & {text = ""}
         let text = open + arg.text + close
      R"\$([^\{]*){"! {_, tag} or tag is "" ->
         #bracket{tag, arg.text} &: {text = text}
   {null?, {=> token}, null?} ->
      #join{token} &: {text = token}
   args ->
      var rval = #join{}
      var text = ""
      enumerate{args} each {i, match arg} ->
         {=> token} when i mod 2 == 1 ->
            rval.push{token}
            text += token
         #join{*sub} ->
            text += arg.text
            rval ++= sub
         #bracket ->
            text += arg.text
            rval.push{arg}
         null? ->
            pass
      rval &: {text = text}

parser = new opg.parse.Parser{tok, prio.getOrder{}, finalize}

parse{text} =
   parser.parse{text}

overridable! mac{"wrap-quote"}! wq_mac{context, info, form, `{^x}`} =
   `[^x].to-string{}`

mac{"'"}! interpolate_mac{context, info, form, expr and #value{s}} =
   #join{*contents} = parse{s}
   parts = {}
   var current = ""
   push{} =
      if current != "":
         parts.push{#value{current}}
         current = ""
   contents each
      String? s ->
         current += unescape{s}
      #bracket{match, expr} ->
         do:
            push{}
            p = form.env.mark{#parse{expr}}
         ""  ->
            parts.push with `ENode{{}, {=}, {^p}}`
         tag ->
            parts.push with `ENode{{^=tag}, {=}, {^p}}`
   push{}

   wq = form.env.mark{`wrap-quote`}
   `[^wq]{ENode{{}, {=}, {^*parts}}}`

