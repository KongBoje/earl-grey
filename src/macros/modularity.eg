
require:
   "./helpers" ->
      Body, inject-tools
   "../location" -> [<<:]
   "../util" -> camelCase

inject: mac

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; REQUIRE/PROVIDE AND GLOBALS ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

mac{"__require"}! __require_mac{context, info, form, expr} =
   req = #variable{.require} &: {top = true}
   `[^req][^expr]`


getreqs{info, req, expr} =

   stmts = {}
   names = {}
   var curpkg = null
   pkgs = {=}

   logName{name and [#symbol{camelCase! n} or #variable{n}]} =
      names.push with name
      pkgs[n] = curpkg

   topfetch{pkg, v, args = null} =
      curpkg = pkg
      stmts.push with
         if args:
            then: `let ^v = [^req]{^pkg}[^args]`
            else: `let ^v = [^req]{^pkg}`
      v

   produce{match expr, fetch} =

      #symbol{s} ->
         logName{expr}
         fetch{#value{s}, expr}

      #value{String? s} ->
         fetch{expr, #symbol{info.gensym{}} &: {reqname = s}}

      #multi{*subp} or #data{*subp} ->
         subp each p -> produce{p, fetch}
         null

      #send{#symbol{"/"}, #data{#void{}, sym and #symbol{name}}} ->
         fetch{#value{'earlgrey-runtime/std/{name}'}, sym}

      #send{#symbol{"^"}, #data{#void{}, name}} ->
         fetch{name, #symbol{info.gensym{}} &: {reqname = name}}

      #send{#symbol{"as"}, #data{pkg, s}} ->
         logName{s}
         produce{pkg} with {the_pkg, _, args = null} ->
            fetch{the_pkg, s, args}

      #send{#symbol{"->"}, #data{pkg, subp}} ->
         pkgv = produce{pkg, fetch}
         rqn = pkgv.reqname or pkgv[1]
         produce{subp} with {_pkg, v, args = null} ->
            let pkg = match _pkg:
               #value{camelCase! s} -> #value{s}
               x -> x
            stmts.push{`let ^v = ^x`} where x =
               if args:
                  then: `getProperty{^pkgv, ^pkg, ^=rqn}[^args]`
                  else: `getProperty{^pkgv, ^pkg, ^=rqn}`
            v

      #send{#symbol{operator}, _} when expr.fromop ->
         s = match info.raw{expr}.trim{}.replace{R"^,+|,+$", ""}:
            R"^\.*/"? x -> x
            R"^(\.+)(.*)"! {_, match pfx, rest} ->
               "." ->
                  '{pfx}/{rest}'
               else ->
                  '{dotdots.join{""}}{rest}' where
                     dotdots = 2..pfx.length each _ -> "../"
            text ->
               text
         name = match s.split{"/"}:
            {*, R"^[a-zA-Z0-9_\-]+$"? name} -> name
            {*, other} ->
               throw E.syntax.module{
                  '`{other}` is not a valid symbol; use `require: "{s}" as xyz` instead'
                  {node = expr}
               }
         sym = info.mark{#symbol{name}}
         logName{sym}
         fetch{#value{s}, sym}

      #send{name and #symbol{s}, args and #data{*_}} ->
         logName{name}
         fetch{#value{s}, name, args}

   produce{expr, topfetch}
   {stmts, names, pkgs}
   


mac{"require"}! require_mac{context, info, form, match arg} =
   do: req = info.mark{`__require`}

   #void{} ->
      #variable{.require}

   #value{field} ->
      #send{req, arg}

   #data{expr} or expr is arg ->
      {stmts, _, _} = getreqs{info, req, expr}
      #splice{*stmts}


mac{"requireMacros"}! requiremac_mac{context, info, form, match arg} =
   #data{expr} or expr is arg ->
      req = info.mark{`__require`}
      {stmts, vars, pkgs} = getreqs{info, req, expr}
      body =
         #multi{*stmts, #data{*vs}} where
            vs = vars each v -> `= ^v`
      body <<: arg
      the_macros = info.go{body, .parse, .eval}
      declarations = #splice{*macs} where macs =
         items{the_macros} each {k, v} when Function? v ->
            var r = #splice{}
            deps = if{v.__deps, clone{v.__deps}, {=}}
            r ++=
               items{v.__deps or {=}} each {name, ename} ->
                  mangled = #variable{info.gensym{"_mdep_" + name}}
                  deps[name] = mangled
                  `require: ^[pkgs[k]] -> ^[#symbol{ename}] as ^mangled`
            f{ctx, info, form, expr} =
               info.deps = deps
               v.call{inject-tools{info}, expr}
            r.push with
               #declare_raw{#symbol{k} &: {env = info.env}, #macro{f}}
            r

      #restmacro with {stmts} ->
         {declarations, #multi{*stmts}}

mac{"provide"}! provide_mac{match context, _, form, e} =
   #pattern ->
      match e:
         #void{} -> `module.exports and set-var ^[#variable{.exports}]`
         else    -> `(module.exports and set-var ^[#variable{.exports}])[^e]`
   else ->
      #data{Body! {*expr}} = e
      exp = form.env.mark{`exports`}
      #sink with
         #multi ++
            expr each
               s and #symbol{name} ->
                  `[^exp][^=camelCase{name}] = ^s`
               `^s as ^[#symbol{name} or #value{name}]` ->
                  `[^exp][^=camelCase{name}] = ^s`
               other ->
                  throw E.syntax.provide with
                     "Each clause of provide must be 'sym' or 'sym as name'"

mac{"inject"}! inject_mac{context, _, form, #data{Body! {*expr}}} =
   #restmacro with {stmts} ->
      exp = form.env.mark{`exports`}
      {```
          globals: module
          module.exports{^*expr} =
             var ^exp = {=}
             ^[#multi{*stmts}]
             ^exp
       ```}

mac{"globals"}! globals_mac{context, _, form, #data{Body! {*vars}}} =
   #splice{*globs, `undefined`} where globs =
      vars each variable and #symbol{s} ->
         #declare_raw{variable, #variable{camelCase{s}} &: {top = true}}
