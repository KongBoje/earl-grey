
require:
   "../location" ->
      <<:
   "../util" ->
      camelCase
   "./helpers" ->
      expr_mac
      var_operator
      overridable
      pattern_handlers
      Body
      multimacro
   "../pattern" ->
      ;; parse_pattern
      PatternCompiler

inject: mac

[items{defns} each {k, v} -> mac{k}{v}] where defns = {
   "@" => var_operator{"$it"}
}


;;;;;;;;;;;;;;;;;;
;; PARAMETERIZE ;;
;;;;;;;;;;;;;;;;;;

mac{"parameterize"}! parameterize_mac{ctx, info, form, expr} =
   #data{#multi! #multi{*instructions}} = expr
   #splice{*xs} where xs =
      instructions each
         `^k = ^v` and #symbol{name} is k ->
            info.setopt{name, info.go{v, .parse, .eval}}
            #multi{}
         stmt ->
            throw E.syntax.parameterize{"Invalid parametrization", node = stmt}


;;;;;;;;;;;
;; CHAIN ;;
;;;;;;;;;;;


class ChainHandler:
   constructor{@env} =
      @wrapOrder = 2
   expand{info} =
      @placeholder = @env.mark{#symbol{info.gensym{.ph}}}
      @placeholder
   wrap{expr, info, opt} =
      `chain{^[@placeholder], ^expr}`

mac{"chain"}! chain_mac{match, info, form, expr} =
   #pattern ->
      match expr:
         #void{} -> #special{ChainHandler{form.env}}
         other -> #all{other <<: expr, #special{ChainHandler{form.env}} <<: form}
   #expr{.expr} or #expr{.head} ->
      #data{defn and {=> env}, Body! {*body}} = expr
      it = `@` & {env = env}
      construct{match} =
         {x} -> x
         {x, *rest} ->
            `let [^it = ^x]: ^construct{rest}`
      construct{{defn} ++ body}
   else ->
      #nostep{form}


;;;;;;;;;;;
;; USING ;;
;;;;;;;;;;;

expr_mac! mac{"using"}! using_mac{_, form, #data{defn and {=> env}, body}} =
   it = `@` & {env = env}
   `let [^it = ^defn]: ^body`



;;;;;;;;
;; DO ;;
;;;;;;;;

overridable! mac{"do"}! do_mac{match, _, form, #data{body}} =
   #clause ->
      #block{body}
   #test ->
      Body! {*stmts} = body
      #do{#splice{*stmts}}
   #expr ->
      #multi{body}



;;;;;;;;;;;;;;;;
;; % OPERATOR ;;
;;;;;;;;;;;;;;;;

overridable! mac{"%"}! buildnode_mac{context
                                     info and {=> env}
                                     form
                                     #data{descr, var contents}} =
   match context:
      #check or #project ->
         return #nostep{form}
      else -> pass

   inner-scope = info.scope.fork{}
   env.bind{inner-scope, "wrap-quote", #macro{m}} where
      m{*, `{^x}`} = x
   wrap{x} =
      #use{inner-scope, x}

   var tags = #data{}
   kv = `{=}`

   parse{match whole} =
      #void{} -> null
      #symbol{s} ->
         tags.push with #value{s}
      #value{String! x} ->
         tags.push with #value{x}
      `[. ^[#symbol{x} or #value{String! x}]]` ->
         tags.push with #value{"." + x}
      `[# ^[#symbol{x} or #value{String! x}]]` ->
         tags.push with #value{"#" + x}
      #send{#symbol{"^"}, #data{#void{}, expr}} ->
         tags.push with expr
      `[^_ = ^_]` ->
         kv.push with whole
      #send{expr, rest} ->
         parse{expr}, parse{rest}
      #multi{*args} or #data{*args} ->
         args each arg -> parse{arg}

   parse{descr}

   contents = match contents:
      #void{} -> #array{}
      #multi{*args} ->
         xs = {}
         args each
            pair and `[^k = ^v]` ->
               kv.push with pair
            spl and `[** ^_]` ->
               kv.push with spl
            other ->
               xs.push with wrap{other}
         match xs:
            {x} -> x
            else -> #array{*xs}
      pair and `[^k = ^v]` ->
         kv.push with pair
         #array{}
      x -> wrap{x}

   node = form.env.mark{`ENode`}
   `[^node]{^tags, ^kv, ^contents}`


;;;;;;;
;; S ;;
;;;;;;;

mac{"S"}! S_mac{context, info, form, match arg} =
   #send{#symbol{"'"}, _} ->
      `String{^arg}`
   else ->
      #value with
         match info.gettext{arg}:
            R"^\[(.|\n)*\]$"? text -> text.substring{1, text.length - 1}
            text -> text



;;;;;;;;;;;
;; PRINT ;;
;;;;;;;;;;;

mac{"print"}! print_mac{context, info, form, match} =
   #void{} ->
      `console.log{}`
   arg ->
      `t = ^arg, console.log{t}, t`



;;;;;;;;;;;;
;; METHOD ;;
;;;;;;;;;;;;

mac{"method"}! method_mac{ctx, info, form, expr} =
   multimacro{cases}{ctx, info, form, expr} where cases = {
      project{match expr} =
         `_lambda{^args, ^pre, ^body, ^post, ^gen}` ->
            {at, self} = info.mark{`@`, `self`}
            `_lambda{^args, [^pre, let ^at and ^self = this], ^body, ^post, ^gen}`
         `^args -> ^body` ->
            info.mark{`^args @-> ^body`}
         else ->
            throw E.syntax.invalid-method{"Invalid use of method", node = expr}
   }



;;;;;;;;;;;
;; CLASS ;;
;;;;;;;;;;;

mac{"class"}! class_mac{context, info and {=> env}, form, expr} =
   helper{name, super, stmts} =
      var statics = #data{`[=]`}
      var ctor = {#data{}, #multi{} & {env = env}}

      new_stmts = stmts each
         #send{`static`, #data{Body! {*methods}}} ->
            statics ++= methods
         `constructor[^args] = ^body` or `constructor = ^args -> ^body` ->
            set-var ctor = {args, body}
            #splice{}
         `^lhs = ^rhs` ->
            ;; parse_pattern{info, lhs, rhs} with
            PatternCompiler{lhs, info, opt}.extract_from_rhs{rhs} where opt =
               pattern_handlers.build_object & {
                  allow_nested = false
                  assign{match, value} =
                     #symbol{camelCase! v} or #value{v} ->
                        #do{#assign{`[^name].prototype[^=v]`, value} <<: v}
                     v ->
                        #do{#assign{`[^name].prototype[^v]`, value} <<: v}
                  declare{vars} = {}
                  wrap_target{match} =
                     `^args -> ^body` ->
                        {env => other_env} = body
                        it = #symbol{"@"} & {env = other_env}
                        it2 = #symbol{"self"} & {env = other_env}
                        `_lambda{
                           ^args
                           splice: [let ^it = this, let ^it2 = this]
                           ^body
                           ^=null
                           ^=false
                        }`
                     other ->
                        other
                  success{_} = #splice{}
               }
         stmt ->
            throw E.syntax.class{"Illegal statement in class", {stmt = stmt}}

      {ctor_args, ctor_body} = ctor
      ctor_expr =
         {env => env2} = ctor_body
         it = #symbol{"@"} & {env = env2}
         cls =
            `_lambda{
               ^ctor_args
               ^it = if{not [^name]? this, Object.create{[^name].prototype}, this}
               ^ctor_body
               ^it
               ^=false
            }`
         if super:
            then: `___extend{^cls, ^super}`
            else: cls

      match name:
         #symbol{name_str} ->
            statics.push with
               `["::name" = ^=name_str]`
         else ->
            pass

      statics.push with
         `["::egclass" = true]`

      node =
         #splice{
            `let ^name = ^ctor_expr`
            `^*new_stmts`
            `[[^name] &: ^statics]`
            name
         }

      match context:
         #expr{.multi} -> node
         other -> #multi{node}

   match expr:
      #data{match, Body! {*stmts}} ->
         `[^name < ^super]` ->
            helper{name, super, stmts}
         `[^name {^super}]` ->
            helper{name, super, stmts}
         `[^name {}]` or [#symbol{_} and name] ->
            helper{name, null, stmts}
      #data{Body! {*stmts}} ->
         helper{#symbol{info.gensym{}}, null, stmts}


;;;;;;;;;;;;;;;;;;;
;; ERROR FACTORY ;;
;;;;;;;;;;;;;;;;;;;

mac{"E"}! E_mac = errf_macro{{}} where
   errf_macro{tags}{match, _, form, expr} =
      #check or #project -> #nostep{form}
      ctx ->
         match expr:
            #void{} ->
               `ErrorFactory{{^*tags}}`
            #data{*args} ->
               `ErrorFactory{{^*tags}}.create{^*args}`
            other ->
               #macro with errf_macro{tags ++ {other}}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OUTER AND SCOPE MANIPULATION ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

mac{"outer"}! outer_mac{context, info, form, match} =
   [#data{x, #value{level} = #value{1}} or x and level is 1] and #symbol{s} is x ->
      x &: {level = level}

mac{"tagscope"}! tagscope_mac{context, info, form, `{^[#symbol{name}], ^expr}`} =
   #tagscope{name, expr}

mac{"usescope"}! usescope_mac{context, info, form, `{^[#symbol{name}], ^expr}`} =
   #use{name, expr}


;;;;;;;;;;;;;;;;;
;; ?? OPERATOR ;;
;;;;;;;;;;;;;;;;;

mac{"??"}! maysend_mac{ctx, info, form, #data{x, #void{}}} =
   var accum = `tmp`
   #macro{f} where f{match ctx, info, form, msg} =
      #pattern and #void is msg ->
         #all{`tmp is ^x`, #if{`tmp`, accum, `_`}}
      match is msg ->
         #void{} ->
            `tmp = ^x; if{tmp === undefined or tmp === null, tmp, ^accum}`
         else ->
            accum = `[^accum][^msg]`
            x &: {called = true}
            #macro{f}


;;;;;;;;;;;
;; MAYBE ;;
;;;;;;;;;;;

mac{"maybe"}! maybe_mac{ctx, info, form, expr} =
   #maybe{expr}

