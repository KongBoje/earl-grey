
provide:
   items, enumerate
   binsearch
   classify
   neighbours


items{obj} =
   results = {}
   for [k in obj]:
      results.push with {k, obj[k]}
   results

enumerate{arr} =
   results = {}
   l = arr.length
   for [i = 0, i < l, i++]:
      results.push with {i, arr[i]}
   results

binsearch{xs, x} =
   lo = 0
   hi = xs.length - 1
   while [lo <= hi]:
      mid = lo + [[hi - lo] >> 1]
      v = xs[mid]
      match xs[mid]:
         [< x] ->
            lo := mid + 1
         [> x] ->
            hi := mid - 1
         [_] ->
            return [mid + 1]
   lo

__classify{xs} =
   results = {=}
   while xs.length:
      match xs.shift{}:
         #splice{newxs} ->
            xs := newxs ++ xs
         {cls, x} ->
            if [not results[cls]]:
               results[cls] := {}
            results[cls].push with x
   results

classify{*classes, xs} =
   results = {rest = {}}
   classes each cls ->
      results[cls] := {}
   while xs.length:
      match xs.shift{}:
         #splice{*newxs} ->
            xs := newxs ++ xs
         #ignore ->
            null
         {cls, x} when results[cls] ->
            results[cls].push with x
         other ->
            results.rest.push with other
   results


neighbours{match} =
   {} -> {}
   {x} -> {}
   {x, y, *rest} ->
      {{x, y}} ++ neighbours{{y} ++ rest}

