
provide:
   GenSym, gensym
   identity
   binsearch
   classify, classify_contiguous
   ;; _neighbours
   partition
   construct
   mkset
   ;; product
   Body
   camelCase
   invCamelCase
   mac1, checker_db


GenSym{prefix} =
   ;; Simple symbol generator.
   ;; g = GenSym{"$"}
   ;; g{} ==> "$0", "$1", "$2", ...
   ;; g{"xyz"} ==> "xyz$0", "xyz$1", "xyz$2", ...
   id = 0
   {pfx = ""} ->
      r = pfx + prefix + [String! id]
      id++
      r

;; gensym = GenSym{"È£"}
gensym = GenSym{"$$"}


identity{x} = x


binsearch{xs, x} =
   ;; Find an insertion point for x in the sorted array xs.
   ;; Returns an index i such that
   ;;   xs[i - 1] < x <= xs[i]
   ;; In particular,
   ;;   If x < xs[0]              ==> return 0
   ;;   If x > xs[xs.length - 1]  ==> return xs.length
   ;; Take note that
   ;;   If x == xs[i]             ==> return i + 1
   ;; The return value should not be interpreted as the index where x
   ;; is found, but some index where x can be safely spliced to
   ;; preserve the array's sortedness.
   var lo = 0
   var hi = xs.length - 1
   while [lo <= hi]:
      mid = lo + [[hi - lo] >> 1]
      v = xs[mid]
      match xs[mid]:
         [< x] ->
            set-var lo = mid + 1
         [> x] ->
            set-var hi = mid - 1
         [_] ->
            return [mid + 1]
   lo


classify{*classes, var xs} =
   ;; Classify a list of lists accordingly to the first element
   ;; of the list. The categories must be listed explicitly
   ;; and any element that doesn't fit is put in the rest field
   ;; of the return value.
   ;; Example:
   ;;   classify{.a, .b, {#a{1}, #b{2}, #a{3}, #a{4}, #c{5}}}
   ;;     ==> {a = {1, 2}, b = {2}, rest = {#c{5}}}

   results = {rest = {}}
   classes each cls ->
      results[cls] = {}
   while xs.length:
      match xs.shift{}:
         #splice{*newxs} ->
            set-var xs = newxs ++ xs
         #ignore ->
            null
         {cls, x} when results[cls] ->
            results[cls].push with x
         other ->
            results.rest.push with other
   results


classify_contiguous{xs, classifier} =
   ;; Split xs according to a predicate, preserving the
   ;; order. Contiguous elements with the same category are put
   ;; together.
   ;; Example:
   ;;   classify_contiguous{{1, 2, 4, 3, 5}, {x} -> x mod 2 == 0}
   ;;     ==> {{false, 1}, {true, 2, 4}, {false, 3, 5}}

   groups = {}
   var currcls = null
   var curr = null
   xs each x ->
      cls = classifier{x}
      if [cls === currcls]:
         then: curr.push with x
         else:
            if curr:
               groups.push with curr
            set-var curr = {cls, x}
            set-var currcls = cls
   if curr:
      groups.push with curr
   groups


;; _neighbours{match} =
;;    ;; Takes an array and returns an array of pairs of consecutive elements.
;;    ;; Example:
;;    ;;   neighbours{{1, 7, 10, 3, 7}}
;;    ;;     ==> {{1, 7}, {7, 10}, {10, 3}, {3, 7}}

;;    {} -> {}
;;    {x} -> {}
;;    {x, y, *rest} ->
;;       {{x, y}} ++ _neighbours{{y} ++ rest}


partition{xs, predicate} =
   ;; Partition a list according to a predicate
   ;; Example:
   ;;   partition{{1, 2, 4, 5, 16}, {x} -> x mod 2}
   ;;     ==> {{1, 5}, {2, 4, 16}}

   t = {}
   f = {}
   xs each
      x when predicate{x} -> t.push{x}
      x -> f.push{x}
   {t, f}


;; product{a, b} =
;;    var results = {}
;;    a each x ->
;;       results ++=
;;          b each y -> {x, y}
;;    results


construct{match, fn, zero} =
   {} -> zero
   {x} -> x
   {x, *rest} ->
      fn{x, construct{rest, fn, zero}}


mkset{xs} =
   rval = {=}
   xs each x ->
      rval[x] = true
   rval


Body{match x} =
   #multi{*xs} -> xs
   else -> {x}


camelCase{x} =
   if x.indexOf{"-"} == -1:
      x
   else:
      x.replace{R.g"-([A-Za-z0-9_])", {_, m} -> m.toUpperCase{}}

invCamelCase{x} =
   x.replace{R.g"([a-z0-9])([A-Z]+)"} with {_, m1, m2} ->
      m1 + "-" + m2.toLowerCase{}



mac1{f} = 
   #macro with {context, scope, form, #data{expr}} ->
      f{expr}

__chk_ncache = {=}
__chk_scache = {=}

checker_db{match} =
   null? -> checker_db.null
   undefined? -> checker_db.undefined
   ===true -> checker_db.true
   ===false -> checker_db.false
   Number? n ->
      ;; I believe that the reason why we are caching these macros is
      ;; so that they can be compared with ==. This is done when
      ;; optimizing patterns for example. I wrote this way after the
      ;; fact, so I'm not 100% sure, but that's the only explanation I
      ;; can think of. There's probably a better way to do all this.
      if [__chk_ncache[n]]:
         then: __chk_ncache[n]
         else:
            v = mac1{{x} -> `[^x === ^=n]`}
            __chk_ncache[n] = v
            v
   String? s ->
      if Object.prototype.hasOwnProperty.call{__chk_scache, s}:
         then: __chk_scache[s]
         else:
            v = mac1{{x} -> `[^x === ^=s]`}
            __chk_scache[s] = v
            v

checker_db &: {
   String = mac1 with {x} -> `[typeof{^x} === "string"]`
   Number = mac1 with {x} -> `[typeof{^x} === "number"]`
   ;; Array = mac1 with {x} -> `[[instanceof]{^x, Array}]`
   Array = mac1 with {x} -> `Array.isArray{^x}`
   true = mac1 with {x} -> x
   false = mac1 with {x} -> `[not ^x]`
   null = mac1{{x} -> `[^x === ^=null]`}
   undefined = mac1{{x} -> `[^x === ^=undefined]`}
}



