
require:
   "./util" ->
      items, gensym
   ;; "./helpers" ->
   ;;    aslist, gensym
   "./pp" ->
      <>

provide:
   Translator, translate


aslist{match} =
   ;; #void{} -> {#void{}}
   ;; undefined? -> {undefined}
   #multi{*args} -> args
   other -> {other}


js_op_table2 = {
   "+" => "+"
   "-" => "-"
   "*" => "*"
   "/" => "/"
   "mod" => "%"
   "&." => "&"
   "|." => "|"
   "^." => "^"
   "~" => "~"
   "and" => "&&"
   "or" => "||"
   "not" => "!"
   "==" => "==="
   "!=" => "!=="
   "===" => "==="
   "!==" => "!=="
   "<" => "<"
   ">" => ">"
   "<=" => "<="
   ">=" => ">="
   "<<" => "<<"
   ">>" => ">>"
   ">>>" => ">>>"
   "in" => " in "
   "instanceof" => " instanceof "
   "++" => "++"
   "--" => "--"
}


js_op_table = {
   ___plus = "+"
   ___minus = "-"
   ___times = "*"
   ___div = "/"
   ___mod = "%"
   ___binxor = "^"
   ___binand = "&"
   ___binor = "|"
   ___binnot = "~"
   ___and = "&&"
   ___or = "||"
   ___not = "!"
   ___is = "==="
   ___isnt = "!=="
   ___eq = "==="
   ___neq = "!=="
   ___lt = "<"
   ___gt = ">"
   ___lte = "<="
   ___gte = ">="
   ___shl = "<<"
   ___shr = ">>"
   ___shr2 = ">>>"
   ___in = " in "
   ___instanceof = " instanceof "
   ___plusplus = "++"
   ___minusminus = "--"
}



class Translator:

   constructor{prelude = null} =
      @cache := {=}
      @prepend := {}
      if prelude:
         @prepend.push with
            @translate{___serialize_ast{prelude}, .stmt}

   register_value{v, id} =
      match @cache[id]:
         ;; when @locked ->
         ;;    throw E.translation.locked{msg} where
         ;;       msg = "While serializing a value, we can't attempt to serialize another."
         undefined? ->
            temp = #symbol{gensym{}}
            @cache[id] := temp ;; {temp, ___serialize_ast{v}}
            @prepend.push{@translate{..., .stmt}} with
               #declare{temp, ___serialize_ast{v}}
            temp
         name ->
            name

   register_raw{raw, id} =
      match @cache[id]:
         undefined? ->
            temp = #symbol{gensym{}}
            @cache[id] := temp
            @prepend.push{@translate{..., .stmt}} with
               #declare{temp, #raw{raw}}
            temp
         name ->
            name


   dump_store{} =
      ;; decls = items{@store} each {id, {name, serial}} ->
      ;;    #declare{name, serial}
      ;; @store := {=}
      ;; @locked := true
      ;; v = @translate{#multi{*decls}, .stmt}
      ;; @locked := false
      ;; v
      rval = @prepend.join{"\n"}
      @prepend := {}
      rval

   mangle{name} =
      tr = {
         "+" => "__plus__"
         "-" => "__minus__"
         "*" => "__asterisk__"
         "/" => "__slash__"
         "%" => "__percent__"
         "^" => "__caret__"
         "#" => "__hash__"
         "&" => "__amp__"
         "|" => "__pipe__"
         "@" => "__at__"
         "!" => "__bang__"
         "?" => "__qmark__"
         "=" => "__equal__"
         "<" => "__lt__"
         ">" => "__gt__"
         "~" => "__tilde__"
         "." => "__dot__"
         ":" => "__colon__"
      }
      r = {}
      for [i = 0, i < name.length, ++i]:
         c = name[i]
         r.push{tr[c] or c}
      r.join{""}

   body{b, mode} =
      orig = b
      b := aslist{b}
      trst{stmt} = @translate{stmt, .stmt}
      match mode:
         .expr ->
            @translate{x, mode} where
               x = #send{#lambda{{}, orig}, #array{}}
         .return ->
            stmts = b.slice{0, -1}
            ret = b[b.length - 1]
            stmts.map{trst}.join{""} + @translate{ret, .return}
         .stmt ->
            b.map{trst}.join{""}
         other ->
            throw E.syntax.mode{"Unknown mode", {mode = mode}}

   expr{x, mode} =
      match mode:
         .expr -> x
         .stmt -> x + ";"
         .return -> "return " + x + ";"
         other -> throw "OopsI"

   op{op, a, b} =
      e = match {a, b}:
             {#void{}, _} -> op + @translate{b, .expr}
             {_, #void{}} -> @translate{a, .expr} + op
             _ -> @translate{a, .expr} + op + @translate{b, .expr}
      "(" + e + ")"

   translate{expr, mode} =
      match expr:

         #symbol{s} ->
            @expr{@mangle{s}, mode}

         #void{} ->
            @expr{"null", mode}

         #value{v} ->
            r = match v:
               String? ->
                  repl = {
                     "\"" => "\\\""
                     "\n" => "\\n"
                     "\\" => "\\\\"
                  }
                  v := v.replace{R.g'{"\"" or "\\" or "\n"}, {m} -> repl[m]}
                  "\"" + v + "\""
               undefined? ->
                  "(void 0)"
               RegExp? ->
                  chain String{v}:
                     @slice{1, -1}
                     @replace{R.g"/", "\\/"}
                     @replace{R.g"\n", "\\n"}
                     ["/" ++ [@]] ++ "/"
               [Number? or [== true] or [== false] or null?] ->
                  String{v}
               {"::id" => id} when id ->
                  @translate{..., mode} with
                     @register_value{v, id}
               other ->
                  throw E.cannot_serialize{
                     "Cannot serialize value"
                     {value = v}
                  }
            @expr{r, mode}


         #send{#symbol{"___node"}, #value{f}} ->
            f

         #send{#symbol{"___js_fetch"} or #variable{"___js_fetch"}, #array{f, msg}} ->
            @expr{trf + "[" + trmsg + "]", mode} where
               trf = @translate{f, .expr}
               trmsg = @translate{msg, .expr}

         #send{f, msg and #value{s}} ->
            match:
               when [[typeof{s} == "string"]
                     \ and s.match{R'[start, + in "a-zA-Z_$", end]}] ->
                  @expr{trf + "." + trmsg, mode} where
                     trf = @translate{f, .expr}
                     trmsg = @translate{#symbol{s}, .expr}
               otherwise ->
                  @expr{trf + "[" + trmsg + "]", mode} where
                     trf = @translate{f, .expr}
                     trmsg = @translate{msg, .expr}

         #send{f, #array{*args}} ->
            op = match f: | #symbol{x} -> js_op_table[x]
                          | #variable{x} -> js_op_table2[x]
                          | _ -> null
            if op:
               then: @expr{@op{op, args[0], args[1]}, mode}
               else:
                  @expr{trf+"("+trargs.join{","}+")", mode} where
                     trf = @translate{f, .expr}
                     trargs = args each x ->
                        @translate{x, .expr}

         ;; #send{f, msg} ->
         ;;    @expr{trf + "[" + trmsg + "]", mode} where
         ;;       trf = @translate{f, .expr}
         ;;       trmsg = @translate{msg, .expr}

         #send{f, msg} ->
            #symbol{codevar} = @register_raw{code, "~send"} where code =
               "(function(o,m){if(typeof(m)==='string'||typeof(m)==='number'){return o[m];}else{return o['::send'](m);}})"
            ;; codevar = "send"
            @expr{codevar + "(" + trf + "," + trmsg + ")", mode} where
               trf = @translate{f, .expr}
               trmsg = @translate{msg, .expr}

         #array{*args} ->
            r = ["[" + args.map{f}.join{","} + "]"] where
               f{x} = @translate{x, .expr}
            @expr{r, mode}

         #object{*args} ->
            r = ["({" + args.map{f}.join{","} + "})"] where
               f{#array{x, y}} =
                  a = @translate{x, .expr}
                  b = @translate{y, .expr}
                  a + ":" + b
            @expr{r, mode}

         #lambda{bindings, body} ->
            @expr{"function("+a+"){"+b+"}", mode} where
               a = [bindings each x -> @translate{x, .expr}].join{","}
               b = @body{body, .return}

         #if{test, pos, #value{undefined?}} ->
            match mode:
               .expr -> @body{expr, .expr}
               other ->
                  ["if(" + a + "){" + b + "}"] where
                     a = @translate{test, .expr}
                     b = @translate{pos, mode}

         #if{test, pos, neg} ->
            match mode:
               .expr -> @body{expr, .expr}
               other ->
                  ["if(" + a + "){" + b + "}else{" + c + "}"] where
                     a = @translate{test, .expr}
                     b = @translate{pos, mode}
                     c = @translate{neg, mode}


         #declare{binding, #value{undefined?}} ->
            match mode:
               [.expr or .return] -> throw "Invalid in expr ctx"
               other ->
                  ["var " + a + ";"] where
                     a = @translate{binding, .expr}

         #declare{binding, value} ->
            match mode:
               [.expr or .return] -> throw "Invalid in expr ctx"
               other ->
                  ["var " + a + "=" + b + ";"] where
                     a = @translate{binding, .expr}
                     b = @translate{value, .expr}

         #assign{#send{obj, msg}, rhs} ->
            @expr{"(" + a + "[" + b + "]=" + c + ")", mode} where
               a = @translate{obj, .expr}
               b = @translate{msg, .expr}
               c = @translate{rhs, .expr}

         #assign{lhs, rhs} ->
            @expr{"(" + a + "=" + b + ")", mode} where
               a = @translate{lhs, .expr}
               b = @translate{rhs, .expr}

         #multi{} ->
            if{mode == .stmt, ";", ""}

         #multi{*args} ->
            isdecl{match} =
               #declare{variable, value} -> true
               other -> false
            match:
               when args.length == 1 ->
                  @translate{args[0], mode}
               when [mode == "expr"] and [not args.some{isdecl}] ->
                  xs = args each x ->
                     @translate{x, .expr}
                  xs := xs each x when x != "" -> x
                  ["(" + xs.join{","} + ")"]
               _ -> @body{expr, mode}

         #splice{*args} ->
            @translate{#multi{*args}, mode}

         #variable{s} ->
            @expr{@mangle{s}, mode}

         #scope{vars, body} ->
            @translate{#multi{*decls, body}, mode} where
               decls = vars each v -> #declare{v, #value{undefined}}

         #object2{*args} ->
            r = ["({" + args.map{f}.join{","} + "})"] where
               f{{x, y}} =
                  a = @translate{x, .expr}
                  b = @translate{y, .expr}
                  a + ":" + b
            @expr{r, mode}

         #js_new{value} ->
            @expr{"(new " + @translate{value, .expr} + ")", mode}

         #js_break{#value{label} = #value{null}} ->
            if [mode == "expr"]:
               then: throw "Invalid break in ctx"
               else: "break" + if{label, " " + label, ""} + ";"

         #js_continue{#value{label} = #value{null}} ->
            if [mode == "expr"]:
               then: throw "Invalid continue in ctx"
               else: "continue" + if{label, " " + label, ""} + ";"

         #js_return{value} ->
            if [mode == "expr"]:
               then: throw "Invalid return in ctx"
               else: "return " + @translate{value, .expr} + ";"

         #js_delete{value} ->
            if [mode == "expr"]:
               then: throw "Invalid delete in ctx"
               else: "delete " + @translate{value, .expr} + ";"

         #js_throw{value} ->
            if [mode == "expr"]:
               then: "function(){throw " + @translate{value, .expr} + ";}()"
               else: "throw " + @translate{value, .expr} + ";"

         #js_label{#value{label}, body} ->
            match mode:
               .expr -> @body{expr, .expr}
               ;; .return ->
               ;;    v = #symbol{gensym{}}
               ;;    @translate{x, #return{{x} -> @translate{#assign{v, x}, .return}
               ;;       #declare{v, #value{undefined}}
               ;;    "var " + v + ";" + @translate{expr, #return{...}} + ";return " with
               ;;       {x} -> "(" + v + "=" + x ")";
               other ->
                  label + ":" + @translate{body, other}

         #js_while{test, body} ->
            match mode:
               .expr -> @body{expr, .expr}
               other ->
                  ["while(" + a + "){" + b + "}"] where
                     a = @translate{test, .expr}
                     b = @translate{body, .stmt}

         #js_for{x, y, z, body} ->
            match mode:
               .expr -> @body{expr, .expr}
               other ->
                  ["for("+a+b+c+"){"+d+"}"] where
                     a = @translate{x, .stmt}
                     b = @translate{y, .stmt}
                     c = @translate{z, .expr}
                     d = @translate{body, .stmt}

         #js_for_in{x, y, body} ->
            match mode:
               .expr -> @body{expr, .expr}
               other ->
                  ["for("+a+" in "+b+"){"+c+"}"] where
                     a = @translate{x, .expr}
                     b = @translate{y, .expr}
                     c = @translate{body, .stmt}

         #js_try{attempt, #lambda{{#symbol{v} or #variable{v}}, body}, #void{}} ->
            match mode:
               .expr -> @body{expr, .expr}
               other ->
                  "try{" + a + "}catch(" + v + "){" + b + "}" where
                     a = @translate{attempt, .stmt}
                     b = @translate{body, .stmt}

         #raw{x} -> x

         other ->
            throw other


translate{expr, mode} =
   tr = Translator{}
   t = tr.translate{expr, mode}
   tr.dump_store{} + t

