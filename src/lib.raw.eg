
;; Macros generate uses of these

send{obj, msg and match} =
   [String? or Number?] -> ___js_fetch{obj, msg}
   other -> obj["::send"]{msg}


;; Integrate with builtins

Array[":::project"] := {value and match} ->
   Array? -> {true, value}
   _ -> {true, {value}}

Array.prototype["::check"] := {value} ->
   if [value instanceof Array]:
      then:
         for [i = 0, i < this.length, i++]:
            if [this[i] != value[i]]:
               return false
         true
      else:
         false

Array.prototype[":::project"] := {value} ->
   if [value instanceof Array]:
      then:
         for [i = 0, i < this.length, i++]:
            if [this[i] != value[i]]:
               rval = this.slice{0}
               rval.push{value}
               return {true, rval}
         {true, value}
      else:
         rval = this.slice{0}
         rval.push{value}
         {true, rval}

Array.prototype[":::deconstruct"] := {value} ->
   {true, value.slice{this.length}}

Array.prototype["::serialize_ast"] := {} ->
   #array{*this.map{___serialize_ast}}

RegExp.prototype["::check"] := {value} ->
   value.match{this}

RegExp.prototype[":::project"] := {value} ->
   match value.match{this}:
      null? m -> {false, null}
      m -> {true, m}

RegExp.prototype[":::deconstruct"] := {value} ->
   match value.match{this}:
      null? m -> {false, null}
      m -> {true, m}

Function.prototype["::send"] := {args} ->
   this.apply{this, args}
