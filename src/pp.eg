

provide:
   pr_terminus
   pr, <>
   repr






pr_terminus{node} =
   r = HTML{node, .span}
   pre = String.fromCharCode{27} + "[?0;7y+h <div class=\"ug\">"
   post = "</div>" + String.fromCharCode{7}
   console.log with [pre + r + post]

pr{match, r} =
   ENode? n ->
      pr_terminus{n}
   x ->
      pr_terminus{[r or repr]{x}}

[<> x] = pr{x}

let repr{x and match, Function? recur = repr} =
   === true -> .special.true % "true"
   === false -> .special.false % "false"
   null? -> .special.nil % "null"
   undefined? -> .special.nil % "undefined"
   Number? -> .num % String{x}
   String? -> .str % x
   ;; Struct? {tag, *entries} ->
   ;;    .struct % {.sym % tag, .sequence % [entries each x -> recur{x, repr}]}
   Array? entries ->
      .sequence % [entries each x -> recur{x, repr}]
   when x["::repr"] ->
      x["::repr"]{recur}
   when Object.getPrototypeOf{x} === Object.prototype ->
      table.object %
         items{x} each {k, v} ->
            tr %
               th % recur{k, repr}
               td % recur{v, repr}
   ;; when Object.getPrototypeOf{x} === Object.prototype ->
   ;;    .table %
   ;;       items{x} each {k, v} ->
   ;;          .pairing %
   ;;             recur{k, repr}
   ;;             recur{v, repr}
   other ->
      .unknown % other.toString{}


escape_html{String! s} =
   repl = with
      "&" => "&amp;"
      "<" => "&lt;"
      ">" => "&gt;"
   s.replace{R.g"[&<>]", {x} -> repl[x]}

quotify{String! s} =
   s.replace{R.g"[\"\\]", {x} -> "\\" + x}


HTML{match, default_tag} =

   String? s ->
      escape_html{s}

   Array? children ->
      chs.join{""} where chs =
         children each child -> HTML{child, default_tag}

   ENode? {=> tags, => props, => children} ->
      var tag = default_tag or "span"
      classes = {}
      var id = null
      kv = {}
      sub = {}
      tags each
         R"^\.(.*)"! {_, cls} ->
            classes.push with cls
         other ->
            tag = other

      items{props} each {k, v} ->
         kv.push with {k, v}

      var accum = if{tag === .raw, {}, {"<", tag}}
      if id:
         set-var accum = accum.concat with
            " id=\"", id, "\""
      if classes.length:
         set-var accum = accum.concat with
            " class=\"", quotify{classes.join{" "}}, "\""
      if kv:
         kv each {k, v} ->
            set-var accum = accum.concat with
               if [v !== null]:
                  then: {" ", k, "=\"", quotify{v}, "\""}
                  else: {" ", k}

      children2 = match tag:
         .raw -> children each
            String? s -> s
            c -> HTML{c, default_tag}
         other -> children each c -> HTML{c, default_tag}

      match tag:
         .raw ->
            accum.concat{children2}.join{""}
         other ->
            accum.concat{x}.join{""} where x =
               {">", *children2, "</", tag, ">"}


   ;; ENode? {=> classes, => children} ->
   ;;    var tag = default_tag or "span"
   ;;    _classes = {}
   ;;    var id = null
   ;;    kv = {}
   ;;    sub = {}
   ;;    classes each
   ;;       #assoc{k, v} ->
   ;;          kv.push with {k, v}
   ;;       #assoc{k} ->
   ;;          kv.push with {k, undefined}
   ;;       R'[start, "+", {*any}]! {_, m} ->
   ;;          set tag = m
   ;;       R'[start, "#", {*any}]! {_, m} ->
   ;;          set id = m
   ;;       String? s ->
   ;;          _classes.push with s

   ;;    var accum = if{tag === .raw, {}, {"<", tag}}
   ;;    if id:
   ;;       set accum = accum.concat with
   ;;          " id=\"", id, "\""
   ;;    if _classes.length:
   ;;       set accum = accum.concat with
   ;;          " class=\"", quotify{_classes.join{" "}}, "\""
   ;;    if kv:
   ;;       kv each {k, v} ->
   ;;          set accum = accum.concat with
   ;;             if [v !== null]:
   ;;                then: {" ", k, "=\"", quotify{v}, "\""}
   ;;                else: {" ", k}

   ;;    children2 = match tag:
   ;;       .raw -> children each
   ;;          String? s -> s
   ;;          c -> HTML{c, default_tag}
   ;;       other -> children each c -> HTML{c, default_tag}

   ;;    match tag:
   ;;       .raw ->
   ;;          accum.concat{children2}.join{""}
   ;;       other ->
   ;;          accum.concat{x}.join{""} where x =
   ;;             {">", *children2, "</", tag, ">"}

   other ->
      HTML{String! other, default_tag}

