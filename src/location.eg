
require:
   "./util" ->
      binsearch ;;, items, enumerate
   "./pp" ->
      <>, repr as _repr
   fs
   opg ->
      Source, Location
   "opg/lib/highlight" ->
      highlight as highlight
      highlightLocations as highlight_locations
      mergeLocations as merge_locations

provide:
   Source, Location
   highlight, highlight_locations
   merge_locations
   <<:, ++:
   format_error, display_error

let repr = _repr



x <<: y =
   if [not Location? x.location]:
      x.location = if{not y or Location? y, y, y.location}
   x

x ++: y =
   x2 = if{not x or Location? x, x, x.location}
   y2 = if{not y or Location? y, y, y.location}
   [merge_locations with {x2, y2}] !! e -> undefined



format_error{match e, context = 0} =

   do:
      fmt_args{e} =
         if [e.args and e.args.length]:
            then: .error_args % repr{e.args}
            else: ""

   E.syntax? {args => {args}} ->
      hls = {.hl1, .hl2, .hl3, .hl4}
      locs = enumerate{items{args}} each
         {i, {key, arg}} when arg and arg.location ->
            {arg.location, hls[i mod 4]}
      div %
         .error %
            .error_type % e.name
            .error_message % e.message
         .error_args.syntax % repr{args}
         highlight_locations{locs, context}

   {location => Location? loc} ->
      div %
         .error %
            .error_type % e.name
            .error_message % e.message
         fmt_args{e}
         highlight_locations{{{loc, .hl1}}, context}
         .traceback % e.stack or ""

   {location => #location{url, start, end}} ->
      data = fs.readFileSync{url, .utf8} !! e -> null
      if data:
         then:
            loc = Location{Source{data, url}, start, end}
            div %
               .error %
                  .error_type % e.name
                  .error_message % e.message
               fmt_args{e}
               ;; if{e.args, .error_args % repr{e.args}, ""}
               highlight_locations{{{loc, .hl1}}, context}
               .traceback %
                  % e.stack or ""
         else:
            div %
               .error %
                  .error_type % e.name
                  .error_message % e.message
               fmt_args{e}
               .traceback %
                  % e.stack or e

   other ->
      div %
         .error %
            .error_type % e.name
            .error_message % e.message
         ;; if e.args:
         ;;    then: .error_args % repr{e.args}
         ;;    else: ""
         fmt_args{e}
         .traceback %
            % e.stack

display_error{e} =
   <> format_error{e}

