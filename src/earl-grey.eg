
require:
   "./location" ->
      Source, Location
      highlight_locations
      <<:
   "./lex" ->
      tokenize
   "./parse" ->
      parse
   "./translate-js" ->
      Translator
   "./stdenv" as std
   "./expand" as exp
   "./opt" as opt
   "./util" ->
      Body
      GenSym
   vm, module, path
   "source-map" as smap ->
      SourceNode
   "multi-stage-sourcemap" -> transfer
   "./version" -> version
   "./evaluator" -> evaluator

provide:
   evaluator
   Source, Location, highlight_locations
   tokenize, parse
   Generator
   version


es5Transform{x, opts = null} =
   require: babel
   babel.transform{x, opts}



globalizer = GenSym{"_$$_"}

class Pipeline:

   constructor{@opts} =
      @gensym = globalizer
      @_expander = std.make_expander{@}
      @env = @_expander.mkenv{}

   parse{source} =
      t = tokenize{source}
      parse{t}

   expand{ast} =
      @_expander.expand{#top, exp.topscope, @env.mark{ast}}

   translate{ast} =
      res = opt.hoist{ast}
      globvar = @gensym{"global"}
      tr = Translator{null, globvar}
      rval = collapse{tr.translate{res, .expr}}
      prep = tr.dump_store{}
      {
         code =
            if @opts.es5:
               es5Transform{r}.code
            else:
               r
         globvar = globvar
         global = Object.create{global}
         location = ast.location
      } where
         r = "\"use strict\";" + prep + ";(" + rval + ")"

   evaluate{src} =
      loc = src.location or {source = {url = "<eval>"}}
      ev{src.code} where
         ev = evaluator with {
            globvar = src.globvar
            global = src.global
            filename = loc.source.url
            showname = loc.source.url
            cwd = loc.source.url
         }

   go{x, match start, end} =
      when start === end or start === .eval ->
         x
      .source ->
         @go{@parse{x}, .parse, end}
      .parse ->
         @go{@expand{x}, .expand, end}
      .expand ->
         @go{@translate{x}, .translate, end}
      .translate ->
         @go{@evaluate{x}, .eval, end}
      else ->
         throw E.pipeline{"Unknown pipeline stage: " + start}


;; generate{source} =
;;    Generator{}.generate{source}


collapse{match node} =
   ENode? {=> tags, => props, => children} ->
      parts = {}
      acc{children} where acc{match} =
         String? s -> parts.push with s
         Array? [each x] -> acc{x}
         ENode? n -> parts.push with collapse{n}
      parts.join{""}
   String? s ->
      s
   else ->
      print node
      throw E.invalid_translation_node{node}

makeAnnotatedAST{match node} =
   ENode? {=> tags, => props, => children} ->
      parts = {}
      acc{children} where acc{match} =
         String? s -> parts.push with s
         Array? [each x] -> acc{x}
         ENode? n -> parts.push with makeAnnotatedAST{n}

      if props.origin and props.origin.location:
         loc = props.origin.location
         {{var l, var c}, _} = loc.linecol{}
         src = loc.source.url
         rval = new SourceNode{l, c, src or "<unknown>", parts}
         ;; print {l, c, loc.text{}, rval.toStringWithSourceMap{{=}}.code}
         rval
      else:
         parts
   String? s ->
      s
   else ->
      print node
      throw E.invalid_translation_node{node}

toCodeAndSourceMap{node, url} =
   var ast = makeAnnotatedAST{node}
   if not SourceNode? ast:
      ast = new SourceNode{1, 0, null, ast}
   obj = ast.toStringWithSourceMap with {file = url}
   obj


class Generator:

   constructor{@opts = {=}} =
      @tr = Translator{null, @opts.globvar}
      @env = std.stdenv.fork{}
      @interactive = @opts.interactive
      @_eval = null
      @pipeline = Pipeline{{es5 = process.title == .node} & @opts}
      @expander = std.make_expander{@pipeline}

   generateInteractive{source, var opts = {=}} =

      opts = [{noboil = @interactive} & @opts] & opts

      t = tokenize{source}
      p = parse{t}
      ;; #interactive forces declarations into the top scope, which
      ;; means successive calls to generate{} will see global
      ;; variables set by the previous. It also makes all variables
      ;; declared in the top scope mutable (because that's more
      ;; practical in interactive mode)
      var ex = @expander.expand{
         #top
         opts.scope or exp.topscope
         @env.mark{stmt}
      } where stmt =
         if @interactive:
            then:
               Body! {*args} = p
               #interactive{*args}
            else: #multi{p}

      wrap{body} =
         #send{#variable{.spawn}, #array{#lambda{{}, body, #value{true}}}}

      ex = match ex:
         #scope{vars, body} ->
            #scope{vars, wrap{body}}
         body ->
            wrap{body}

      set ex = opt.hoist{ex}
      var result = @tr.translate{ex, .stmt}
      result = splice %
         "\n'use strict';"
         match opts.noboil:
            true? -> ""
            when opts.es5 ->
               "require('earlgrey-runtime/5');"
            else ->
               "require('earlgrey-runtime/6');"
         result
      result = collapse{result}

      if opts.es5:
         result = es5Transform{result, {=}}.code

      result


   generate{source, var opts = {=}} =

      opts = [{noboil = @interactive} & @opts] & opts

      t = tokenize{source}
      p = parse{t}
      ;; #interactive forces declarations into the top scope, which
      ;; means successive calls to generate{} will see global
      ;; variables set by the previous. It also makes all variables
      ;; declared in the top scope mutable (because that's more
      ;; practical in interactive mode)
      var ex = @expander.expand{
         #top
         opts.scope or exp.topscope
         @env.mark{stmt}
      } where stmt =
         if @interactive:
            then:
               Body! {*args} = p
               #interactive{*args}
            else: #multi{p}
      set ex = opt.hoist{ex}
      ;; set ex = opt.eliminate_spurious_variables{ex}

      var result = @tr.translate{ex, .stmt}
      ;; if not opts.noboil:
      result = splice %
         "\n'use strict';"
         match opts.noboil:
            true? -> ""
            when opts.es5 ->
               "require('earlgrey-runtime/5');"
            else ->
               "require('earlgrey-runtime/6');"
         @tr.dump_store{} ;; useless at this point I think
         result

      if not opts.sourceMap:
         result = collapse{result}
         if opts.es5:
            result = es5Transform{result, {=}}.code
         {code = result, map = null}

      else:

         result = toCodeAndSourceMap{result, source.url}

         if opts.es5:
            {=> code, => map} = es5Transform{result.code, {sourceMap = true}}
            newmap = transfer with {
               fromSourceMap = map
               toSourceMap = result.map.toString{}
            }

            result = {code = code, map = newmap}

         match opts.sourceMap:
            .inline ->
               result.code
                  \ + "\n/"+"/# sourceMappingURL=data:application/json;base64,"
                  \ + [new Buffer{result.map.toString{}}.toString{.base64}]
                  \ + ".map\n"
            else ->
               parts = source.url.split{"/"}
               smname = parts[parts.length - 1].replace{R".eg$", ".js"}
               result.code +=
                  "\n/" + "/# sourceMappingURL=" + smname + ".map\n"
               result

   getEval{file} =
      if [not @_eval]:
         @_eval = evaluator with {
            globvar = @tr.globvar
            global = null
            filename = file
            showname = file
            cwd = file
         }
      @_eval

   evaluate{source} =
      @getEval{source.url}{@generate{source, {noboil = true}}.code}

   evaluateInteractive{source, opts = {=}} =
      @getEval{source.url}{@generateInteractive{source, opts & {noboil = true}}}

