
require:
   "./location" ->
      Source, Location
      highlight_locations
   "./lex" ->
      tokenize
   "./parse" ->
      parse
   "./translate-js" ->
      translate, Translator
   "./stdenv" as std
   "./opt" as opt

provide:
   Source, Location, highlight_locations
   tokenize, parse
   Generator, generate


;; generate_from_ast{ast} =
;;    ex = expand{#top{stdenv.fork{}}, #multi{ast}}
;;    translate{ex, .stmt}

generate{source} =
   Generator{}.generate{source}

class Generator:
   constructor{} =
      @tr := Translator{std.stdprelude}
      @env := std.stdenv.fork{}
   generate{source} =
      t = tokenize{source}
      p = parse{t}
      ;; #splice will force declarations into the top scope, which
      ;; means successive calls to generate{} will see global
      ;; variables set by the previous. This is essential for
      ;; interactive mode.
      ex = std.expand{#top
                      std.topscope
                      std.bind_ast{#splice{p}, @env}}
      ex := opt.hoist{ex}
      rval = @tr.translate{ex, .stmt}
      @tr.dump_store{} + rval

