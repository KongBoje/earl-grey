
require:
   "./location" ->
      Source, Location
      highlight_locations
   "./lex" ->
      tokenize
   "./parse" ->
      parse
   "./expand" ->
      expand
   "./stdenv" ->
      stdenv, stdprelude
   "./translate-js" ->
      translate, Translator
   "./stdenv2" as e2
   "./opt" as opt

provide:
   Source, Location, highlight_locations
   tokenize, parse
   generate_from_ast, generate
   Generator
   Generator2, generate2


generate_from_ast{ast} =
   ex = expand{#top{stdenv.fork{}}, #multi{ast}}
   translate{ex, .stmt}

generate{source, prelude} =
   t = tokenize{source}
   p = parse{t}
   ex = expand{#top{stdenv.fork{}}, #multi{p}}
   [prelude or ""] + translate{ex, .stmt}

generate2{source} =
   ;; t = tokenize{source}
   ;; p = parse{t}
   ;; ex = e2.expand{#top, e2.topscope, e2.bind_ast{#multi! p, e2.stdenv.fork{}}}
   ;; ex := opt.hoist{ex}
   ;; tr = Translator{}
   ;; rval = tr.translate{ex, .stmt}
   ;; tr.dump_store{} + rval
   Generator2{}.generate{source}


class Generator:
   constructor{} =
      @tr := Translator{stdprelude}
   generate{source} =
      t = tokenize{source}
      p = parse{t}
      ex = expand{#top{stdenv.fork{}}, #multi{p}}
      rval = @tr.translate{ex, .stmt}
      @tr.dump_store{} + rval


class Generator2:
   constructor{} =
      @tr := Translator{e2.stdprelude}
   generate{source} =
      t = tokenize{source}
      p = parse{t}
      ex = e2.expand{#top, e2.topscope, e2.bind_ast{#multi! p, e2.stdenv.fork{}}}
      ex := opt.hoist{ex}
      rval = @tr.translate{ex, .stmt}
      @tr.dump_store{} + rval

