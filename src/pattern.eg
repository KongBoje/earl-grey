
require:
   "./pp" ->
      <>
   "./location" ->
      [<<:]
   "./util" as util ->
      GenSym, gensym
      classify, classify_contiguous
      identity
      Body
   "./expand" ->
      checker_db

provide:
   PatternCompiler
   parse_clauses


class PatternInfo:
   static:
      mergeAll{pinfos} =
         rval = PatternInfo{}
         pinfos.reduce{f, rval} where f{acc, pinfo} =
            acc.merge{pinfo.pinfo or pinfo}
   constructor{@handlers = {}, @vars = {}, @arguments = {}} =
      pass
   merge{pinfo} =
      @handlers ++= pinfo.handlers
      @vars ++= pinfo.vars
      @arguments ++= pinfo.arguments
      @


;; Options:
;; strings_as_variables => treat strings as if they were variable names?
;; wrap_target{x} => called on the value the pattern will be applied to:
;;    either rhs, or args -> rhs, if args were found embedded in the pattern
;; declare{vars} => preparation code to declare the variables
;; success => what to return on success
;; failure => what to return on failure

class PatternCompiler:

   constructor{@pattern, @info, @opt} =
      pass

   compile{} =
      if [@compiled]:
         return @compiled
      tags = clone{@opt.tags or {=}}
      tags.group_id or= gensym{.group}
      @compiled = @expand{@pattern, tags, true, @opt.indexable}
      @compiled.pinfo.info = @info
      @compiled.pinfo.opt = @opt
      @vars = @compiled.pinfo.vars
      @handlers = @compiled.pinfo.handlers
      @arguments = @compiled.pinfo.arguments
      @compiled

   fork{pattern} =
      pc = PatternCompiler{null, @info, @opt}
      pc.compiled = pattern
      pc &: pattern.pinfo
      pc

   parse_specs{specs, tags} =
      var rest = undefined
      var has_defaults = false
      rval = classify{.fw, .bw, .keys, .defaults} with
         @info.step_all{#pattern, specs} each
            #dynsplice{variable} ->
               set rest = @expand{variable, tags}
               #ignore
            #assoc{key} ->
               #keys with {key, @expand{key, tags}}
            #assoc{key, subp} ->
               #keys with {key, @expand{subp, tags}}
            #default{variable, value} ->
               set has_defaults = true
               if rest:
                  then: throw E.syntax.pattern{"No default arguments after rest arg."}
                  else: #defaults with {@expand{variable, tags}, value}
            v when rest === undefined and not has_defaults ->
               #fw with @expand{v, tags}
            v ->
               #bw with @expand{v, tags}
      rval.rest = rest
      rval

   expand{pattern, tags, toplevel = false, checked = false} =
      expr = @info.step{#pattern, pattern}
      rval = match expr:
         #void ->
            #check{checker_db.null, #ignore}
         #ignore ->
            expr
         #special{handler} ->
            p = @expand{handler.expand{@info}, tags, toplevel, false}
            p.pinfo.handlers.push with handler
            p
         #symbol or #variable ->
            variable = expr & tags
            #assign{variable} &: {pinfo = PatternInfo{{}, {variable}}}
         #value{v} when @opt.strings_as_variables ->
            variable = [#symbol{v} & tags] <<: expr
            #assign{variable} &: {pinfo = PatternInfo{{}, {variable}}}
         #value{v} ->
            #check{checker_db{v}, #ignore}

         #replace{subp, value} ->
            #replace{csubp, value} &: {pinfo = csubp.pinfo} where
               csubp = @expand{subp, tags, toplevel, false}

         #test{condition, subp} ->
            #test{condition, csubp} &: {pinfo = csubp.pinfo} where
               csubp = @expand{subp, tags, toplevel, false}
         #project{projector, subp, unconditional = false} ->
            #project{projector, csubp
                     unconditional} &: {pinfo = csubp.pinfo} where
               csubp = @expand{subp, tags, toplevel, true}
         #check{checker, subp} ->
            #check{checker, csubp} &: {pinfo = csubp.pinfo} where
               csubp = @expand{subp, tags, toplevel, true}

         #send{f, #data and args} ->
            if toplevel:
               then:
                  fn = @expand{f, tags, true, false}
                  fn.pinfo =
                     PatternInfo.mergeAll{{fn.pinfo, PatternInfo{{}, {}, {args}}}}
                  fn
               else:
                  throw E.syntax.pattern{msg, {node = expr, arg = args}} where
                     msg = "Function arguments can only be declared as a top level pattern."

         #send{f, arg} ->
            #assign{expr}

         when not @opt.allow_nested ->
            throw E.syntax.pattern{msg, {node = expr}} where
               msg = "Nested patterns are not allowed here."

         #neg{x} ->
            #neg{cx} &: {pinfo = cx.pinfo} where
               cx = @expand{x, tags}

         #all{*xs} ->
            cxs = xs each x -> @expand{x, tags}
            #all{*cxs} &: {pinfo = PatternInfo.mergeAll{cxs}}

         #any{*xs} ->
            canon{all} = all.sort{}.join{","}
            normalize{vars} =
               canon{vars each #symbol{v} -> v}
            pps = xs each x -> @expand{x, tags}
            neighbours{pps} each {pp1, pp2} ->
               v1 = pp1.pinfo.vars
               v2 = pp2.pinfo.vars
               if [normalize{v1} !== normalize{v2}]:
                  throw E.syntax.pattern{
                     "Both branches of 'or' must contain the same variables"
                     {vars1 = v1.sort{} <<: pp1
                      vars2 = v2.sort{} <<: pp2}
                  }
               ;; if keys{pp1.specials} != {} or keys{pp2.specials} != {}:
               ;;    throw E.syntax.pattern{
               ;;       "Neither branch of 'or' may contain special tokens."
               ;;       {special1 = keys{pp1.specials}.sort{} <<: pp1.pattern
               ;;        special2 = keys{pp2.specials}.sort{} <<: pp2.pattern}
               ;;    }
            #any{*pps} &: {pinfo = pps[0] and pps[0].pinfo}

         #data{*args} ->
            specs = @parse_specs{args, tags}

            var pinfos = {}
            pinfos ++= specs.keys each {_, {=> pinfo}} -> pinfo
            pinfos ++= specs.fw each {=> pinfo} -> pinfo
            pinfos ++= specs.bw each {=> pinfo} -> pinfo
            pinfos ++= specs.defaults each {{=> pinfo}, _} -> pinfo
            if specs.rest:
               pinfos.push{specs.rest.pinfo}
            pinfo = PatternInfo.mergeAll{pinfos}

            match specs:
               {keys => {}, => fw, => bw, => defaults, => rest} ->
                  patt = [#array_pattern{fw, bw, defaults, rest} <<: pattern] &:
                     {pinfo = pinfo}
                  if checked:
                     then: patt
                     else: #check{checker_db.Array, patt} &: {pinfo = pinfo}
               {=> keys, fw => {}, bw => {}, defaults => {}, rest => undefined?} ->
                  #object_pattern{*keys} &: {pinfo = pinfo}
               other ->
                  throw E.syntax.pattern{msg, {node = expr, specs = specs}} where
                     msg = "Pattern must be an array or an object."

         #mode{mode, subp} ->
            @expand{subp, tags & {declare_mode = mode}, toplevel, checked}

         other ->
            throw E.syntax.pattern{"Illegal pattern: " + other, {node = other}}

      if [not rval.pinfo]:
         rval.pinfo = PatternInfo{}
      [@opt.wrap_pattern or identity]{rval <<: pattern, toplevel}


   shift_rhs{match pattern, rhs} =
      #project{projector, subp, === true} ->
         @shift_rhs{subp, `[^projector]{^rhs}`}
      else ->
         {pattern, rhs}

   process_for_rhs{rhs} =
      if [not @compiled]:
         @compile{}
      if [not @opt.allow_arguments and @arguments.length]:
         throw E.syntax.pattern.arguments with
            "Arguments cannot be declared in this pattern"
            {args = @arguments[0]}
      [@opt.wrap_target or identity]! real_rhs =
         if @arguments.length:
            then:
               inject_below_uses{rhs} with {x} ->
                  util.construct{@arguments ++ {x}} with
                     {args, rest} -> `[^args -> ^rest]`
            else:
               rhs
      {cpattern, var target} = @shift_rhs{@compiled, real_rhs}

      var expr = null
      match target:
         #symbol or #variable ->
            pass
         match is cpattern ->
            #assign{#symbol{name} or #variable{name}} ->
               ;; print {name, target}
               target.name = name
            else ->
               {target, expr} = {#variable{@info.gensym{"$targ"}}, target}
         ;; else ->
         ;;    {target, expr} = {#variable{@info.gensym{"$targ"}}, target}

      proc = PatternProcessor{}
      proc.process{cpattern, target, @opt}
      {temps => @temps, parts => @parts} = proc
      @processed = true
      @target = target
      @expr = expr
      {@temps, @parts}

   extract_from_rhs{rhs} =
      if [not @processed]:
         @process_for_rhs{rhs}
      succ = @opt.success{@target}
      fail = @opt.failure{@target}
      assembly = assemble_pattern{@parts, succ, fail}
      #splice with
         if [@expr === null]:
            then: #splice{}
            else: #splice{#declare{@target}, #assign{@target, @expr}}
         * @opt.declare{@info, @vars}
         #multi with
            *[@temps each t -> #declare{t}]
            assembly

   wrapBody{body} =
      enumerate{@handlers} each {i, h} ->
         h.__ord = h.wrapOrder + [i / 1e6]
      @handlers.sort with {x, y} -> x.__ord < y.__ord
      var x = body
      @handlers each handler ->
         x = handler.wrap{x, @info, @opt}
      x

   wrapAssignment{expr} =
      enumerate{@handlers} each {i, h} ->
         h.__ord = h.wrapBodyOrder + [i / 1e6]
      @handlers.sort with {x, y} -> x.__ord < y.__ord
      var x = expr
      @handlers each handler ->
         x = handler.wrapAssignment{x, @info, @opt}
      x


class PatternProcessor:

   constructor{} =
      @temps = {}
      @parts = {}
      @gen = GenSym{"t"}

   "do"{part} =
      @parts.push with #do{part}

   check{part, tags = {=}} =
      @parts.push with #check{part} & tags

   temp{x, var v = null} =
      match x:
         [#variable or #symbol] and {single_assignment => true?} when not v ->
            x
         init ->
            set v = v or #symbol{@gen{}}
            v.single_assignment = true
            @temps.push with v
            @do with `[set ^v = ^init]`
            v

   process{pattern, rhs, fns} =
      rval = match pattern:
         #ignore ->
            @do{rhs}
         #assign{sym} ->
            ;; print {sym, rhs}
            ;; @parts.push with fns.assign{sym, rhs &: {name = sym}}
            @parts.push with fns.assign{sym, rhs}

         #replace{subp, value} ->
            @process{subp, value, fns}

         #test{condition, subp} ->
            @process{subp, rhs, fns}
            @check{condition, {test = true}}

         #check{checker, #ignore} ->
            @check with `[^checker]{^rhs}`
         #check{checker, subp} ->
            t = @temp{rhs}
            @check with `[^checker]{^t}`
            @process{subp, t, fns}

         #project{projector, subp, match unconditional} ->
            true? ->
               t = @temp{`[^projector]{^rhs}`}
               @process{subp, t, fns}
            else ->
               t = @temp{`[^projector]{^rhs}`}
               @check with `[^t][0]`
               @process{subp, `[^t][1]`, fns}

         #neg{patt} ->
            @check{`[not ^x]`} where x =
               pp = PatternProcessor{}
               pp.process{patt, rhs, fns}
               assemble_conditions{pp}

         #all{*xs} ->
            t = @temp{rhs}
            xs each x -> @process{x, t, fns}
            null

         #any{*xs} ->
            t = @temp{rhs, #symbol{gensym{"bridge"}}}
            @check with
               util.construct{parts, fn, `false`} where
                  fn{x, rest} = `[^x or ^rest]`
                  parts = xs each x ->
                     pp = PatternProcessor{}
                     pp.process{x, t, fns}
                     assemble_conditions{pp}

         #object_pattern{*subp} ->
            t = @temp{rhs}
            subp each {#value{k}, v} ->
               @check with `[___hasprop{^t, ^=k}]`
               @process{v, `[^t][^=k]`, fns}

         #array_pattern{fw, bw, dflt, rest} ->
            ;; {a, b, c = 123, *rest, d, e}
            ;;  ^^^^  ^^^^^^^  ^^^^^  ^^^^
            ;;  fw    dflt     rest   bw

            nfw = fw.length
            nbw = bw.length
            ndflt = dflt.length

            extract_length = true
            check_length = true

            lo = nfw + nbw
            hi = lo + ndflt

            t = @temp{rhs}
            len = @temp{`[^t].length`}

            @check with
               match rest:
                  true? ->
                     `[^len >= ^=lo]`
                  when lo === hi ->
                     `[^len === ^=lo]`
                  otherwise ->
                     `[^len >= ^=lo and ^len <= ^=hi]`

            enumerate{fw} each {i, m} ->
               @process{m, `[^t][^=i]`, fns}

            enumerate{dflt} each {i, {patt, value}} ->
               idx = i + nfw
               @process{patt, `if{^=[idx + nbw] >= ^len, ^value, [^t][^=idx]}`, fns}

            if [rest !== undefined]:
               then:
                  pos = nfw + ndflt
                  @process{rest, `Array.prototype.slice.call{^t, ^=pos, ^*end}`, fns} where
                     end = if{nbw > 0, {#value{-nbw}}, {}}
               else: {}

            enumerate{bw} each {i, m} ->
               @process{m, `___js_fetch{^t, ^len - ^=[nbw - i]}`, fns}

      rval

assemble_conditions{pp} =
   construct{match} =
      {} -> #value{true}
      {#do{x}, *rest} ->
         #multi{x, construct{rest}}
      {#check{x}} -> x
      {#check{x}, *rest} ->
         `[^x and ^construct{rest}]`
   if pp.temps.length:
      then:
         #multi{*decls, construct{pp.parts}} where
            decls = pp.temps each t -> #declare{t}
      else:
         construct{pp.parts}

assemble_pattern{parts, t, f = null} =
   lead = {}
   parts.slice{0} each
      #do{x} ->
         lead.push{x}
         parts.shift{}
      #check{x} -> break

   trail = {}
   parts.slice{0}.reverse{} each
      #do{x} ->
         trail.unshift{x}
         parts.pop{}
      #check{x} -> break

   construct{match} =
      {} -> #value{true}
      {#do{x}, *rest} ->
         #multi{x, construct{rest}}
      {#check{x}} -> x
      {#check{x}, *rest} ->
         `[^x and ^construct{rest}]`
      other ->
         throw E.oops{"?!?", other}

   if parts.length:
      then:
         test = construct{parts}
         #multi{*lead, ...} with
            if f:
               then: `if{^test, [^*trail, ^t], ^f}`
               else: `if{^test, [^*trail, ^t]}`
      else:
         #multi{*lead, *trail, t}


inject_below_uses{match, fn} =
   #use{scope, x} ->
      #use{scope, inject_below_uses{x, fn}}
   other ->
      fn{other}


checkall = {.send, .data, .multi, .assign, .void, .check, .do}

same_block{match, ban1, ban2} =
   {#variable{v1}, #variable{v2}} ->
      v1 === v2
   {#symbol{s1}, #symbol{s2}} ->
      not ban1[s1] and not ban2[s2] and s1 === s2
   {#value{v1}, #value{v2}} ->
      v1 === v2
   {#macro{m1}, #macro{m2}} ->
      m1 === m2
   {{type1, *args1}, {type2, *args2}} when checkall.indexOf{type1} !== -1 ->
      if [type1 === type2 and args1.length === args2.length]:
         then:
            zip{args1, args2} each pair ->
               if [not same_block{pair, ban1, ban2}]:
                  return false
            true
         else:
            false
   other ->
      false

parse_clauses{info, target, stmts, opt} =

   var all_temps = {}

   the_parts = info.step_all{#clause, stmts} each

      #clause{pattern, body} ->
         pc = PatternCompiler{pattern, info} with opt & {
            allow_arguments = false
            allow_nested = true
            assign{v, value} =
               #do{#assign{v, value} <<: v}
         }
         pc.process_for_rhs{target}
         {=> vars, => temps, parts => blocks} = pc
         all_temps ++= temps
         vars2 = {=}
         vars each
            #symbol{xxx} ->
               vars2[xxx] = true
            other ->
               throw E.syntax.unexpected{}
         if opt.wrap:
            pc.handlers.push with opt
         #clause{vars, vars2, blocks, pc.wrapBody{body}}

      #block b ->
         b

      other ->
         throw E.syntax.clause with
            "Illegal clause"
            {clause = other}

   if opt.fallback:
      the_parts.push with #block{opt.fallback{target}}
   unique_temps = keys{util.mkset{all_temps each #symbol{t} -> t}}
   #multi{*decls, weave_clauses{the_parts}} where
      decls = unique_temps each t -> #declare{#symbol{t} &: {mutable = true}}


opt_clauses{clauses} =

   shares = enumerate{clauses.slice{1}} each
      {i, #clause{vars, varsd, blocks, body}} ->
         #clause{_, varsd0, blocks0, _} = clauses[i]
         share = 0
         var idx = 0
         blocks each b ->
            if same_block{{blocks0[share], b}, varsd0, varsd}:
               then:
                  share++
                  match b:
                     #do -> null
                     #check -> set idx = share
                     other -> <> other
               else:
                  break
         {share, idx}

   max = Math.max[shares each {x, _} -> x]
   shares.push{{0, 0}}

   temps = [1 .. max] each _ -> #symbol{gensym{}}

   var shared_last = 0
   var idx_last = 0
   new_clauses = enumerate{clauses} each
      {i, #clause{vars, varsd, blocks, body}} ->
         {share, idx} = shares[i]
         shared = if{idx_last, {#check{temps[idx_last - 1]}}, {}}
         n_to_share = Math.max{shared_last, share}

         to_share = enumerate{blocks.slice{shared_last, n_to_share}} each
            {j, #check{x}} -> #check{#assign{temps[shared_last + j], x}}
            {j, #do{x}} -> #do{x}

         set shared_last = share
         set idx_last = idx
         #clause{vars, varsd, newblocks, body} where newblocks =
            shared.concat{to_share}.concat{rest} where
               rest = blocks.slice{n_to_share}
      other ->
         throw E.oops{"what", {value = other}}

   {temps, new_clauses}


weave_clauses{parts} =

   groups = classify_contiguous{parts} with {{cls, *}} -> cls

   var reassemble = {}
   var new_temps = {}
   groups each
      #clause{*elems} ->
         {ts, new_clauses} = opt_clauses{elems}
         new_temps ++= ts
         reassemble ++= new_clauses
      #block{*elems} ->
         reassemble ++= elems

   helper{match} =

      {} ->
         #multi{}

      {#block{Body! {*body}}, *rest} ->
         `[^*body, ^helper{rest}]`

      {#clause{vars, varsd, blocks, body}, *rest} ->
         decls = vars each v -> ;;#declare{v}
            match v.declare_mode:
               .set -> #splice{}
               .let -> #declare{v & {mutable = false}}
               .var -> #declare{v & {mutable = true}}
               .unqualified or undefined? ->
                  #declare{v & {mutable = false}}
         #tagscope{.back} with ```
            ^*decls
            ^assemble_pattern{
               blocks
               body
               #use{.back, helper{rest}}
            }
         ```

   #multi with
      *[new_temps each t -> #declare{t}]
      helper{reassemble}
