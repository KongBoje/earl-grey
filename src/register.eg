
require:
   "./earl-grey" as eg
   "./location" ->
      Source
   fs
   path

globals:
   module

provide:
   getCache
   install


getCache{file, opts = {=}} =

   cachedir = path.join{path.dirname{file}, "egcache"}
   cache = path.join{cachedir, path.basename{file}.replace{R".eg$", ".js"}}

   sstat = fs.statSync{file}
   cstat = fs.statSync{cache} !! e -> null

   {g, compiled, srcfile} =
      if opts.lazy and cstat and sstat.mtime.getTime{} < cstat.mtime.getTime{}:
         if opts.verbose:
            console.error{"Using cached file: " + cache}
         {null, fs.readFileSync{cache, .utf8}, cache}
      else:
         if opts.verbose:
            console.error{"Compiling: " + file}
         text = fs.readFileSync{file, .utf8}
         let g = eg.Generator{{sourceMap = true} & opts}
         {=> code, => map} = g.generate{Source{text, file}}
         try:
            fs.mkdirSync{cachedir} !! e -> "ignore error"
            fs.writeFileSync{cache, code}
            fs.writeFileSync{cache + ".map", map}
         catch e:
            console.error{"Failed to cache compiled version of: " + file}
         {g, code, cache}

   {g, compiled, srcfile}


load{opts}{module, file} =
   {_, compiled, srcfile} = getCache{file, opts}
   module._compile{compiled, srcfile}


extensions = {".eg"}

install{opts = {lazy = true}} =
   req = require
   extensions each ext ->
      req.extensions[ext] = load{opts}

