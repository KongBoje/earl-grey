
require:
   "./earl-grey" as eg
   "./location" ->
      Source
   fs
   path

globals:
   module

provide:
   getCache
   install


getCache{file, opts = {=}} =

   cachedir = path.join{path.dirname{file}, "egcache"}
   cache = path.join{cachedir, path.basename{file}.replace{R".eg$", ".js"}}

   sstat = fs.statSync{file}
   cstat = fs.statSync{cache} !! e -> null

   {g, compiled, srcfile} =
      if opts.lazy and cstat and sstat.mtime.getTime{} < cstat.mtime.getTime{}:
         {null, fs.readFileSync{cache, .utf8}, cache}
      else:
         text = fs.readFileSync{file, .utf8}
         let g = eg.Generator{opts.interactive}
         {=> code, => map} = g.generate{Source{text, file}, {sourceMap = true} & opts}
         try:
            fs.mkdirSync{cachedir} !! e -> "ignore error"
            fs.writeFileSync{cache, code}
            fs.writeFileSync{cache + ".map", map}
         catch e:
            console.err{"Failed to cache compiled version of: " + file}
         {g, code, cache}

   {g, compiled, srcfile}


load{lazy}{module, file} =
   {_, compiled, srcfile} = getCache{file, {lazy = lazy}}
   module._compile{compiled, srcfile}


extensions = {".eg"}

install{lazy = true} =
   extensions each ext ->
      require.extensions[ext] = load{lazy}

