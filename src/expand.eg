
require:
   "./location" ->
      <<:, Source
   "./util" as util ->
      classify
      GenSym, gensym
   ;; "./pattern" ->
   ;;    PatternParser, PatternProcessor
   "./lex" ->
      tokenize
   "./parse" ->
      parse



provide:
   Env
   Scope
   Info
   track_location
   Expander
   GenSym, gensym
   mac1, checker_db
   topscope



class Scope:

   constructor{@parent = null
               @name = gensym{"scope"}} =
      @options = {=}

   getopt{opt} =
      match:
         when Object.prototype.hasOwnProperty.call{@options, opt} ->
            @options[opt]
         when @parent === null ->
            undefined
         otherwise ->
            @parent.getopt{opt}

   setopt{opt, value} =
      @options[opt] = value

   ;; gensym{} =
   ;;    @expander.gensym{}

   ;; step{context, expr} =
   ;;    @expander.step{context, @, expr}

   ;; step_all{context, exprs} =
   ;;    @expander.step_all{context, @, exprs}

   ;; expand{context, expr} =
   ;;    @expander.expand{context, @, expr}

   toString{} =
      "Scope{" + @name + "}"


class Env:

   constructor{} =
      @scopes = {=}

   list_bindings{origin} =
      values = {=}
      var scope = origin
      while scope:
         values &: @scopes[scope.name]
         scope = scope.parent
      values

   resolve{scope, name} =
      if [scope === null]:
         return undefined
      scope_data = @scopes[scope.name]
      if [scope_data and Object.prototype.hasOwnProperty.call{scope_data, name}]:
         then: scope_data[name]
         else: @resolve{scope.parent, name}

   bind{scope, name, value} =
      if [not @scopes[scope.name]]:
         @scopes[scope.name] = {=}
      @scopes[scope.name][name] = value

   mark{expr} =
      match expr:
         {env => e} ->
            expr
         #symbol or #value or #variable or #macro or #void ->
            expr &: {env = [@]}
         {type, *args} ->
            args each arg -> @mark{arg}
            expr &: {env = [@]}
         other ->
            expr &: {env = [@]}

   fork{} =
      e = Env{}
      items{@scopes} each {scope, bindings} ->
         items{bindings} each {k, v} ->
            if [not e.scopes[scope]]:
               e.scopes[scope] = {=}
            e.scopes[scope][k] = v
      e

   toString{} =
      "Env{...}"


track_location{f} = 
   f2{context, scope, expr} =
      rval = f{context, scope, expr} !!
         e ->
            e <<: expr
            throw e
      match rval:
         #bounce{v} ->
            f2{context, scope, v <<: expr}
         other ->
            other <<: expr
   f2


class Info:

   constructor{@context, @scope, @form, @arg, @expander} =
      @env = @form.env

   gettext{match} =
      {=> location} -> location.text{}
      else -> null

   with_scope{newscope} =
      Info{@context, newscope, @form, @arg, @expander}

   gensym{name} =
      @expander.gensym{}

   mkenv{} =
      @expander.mkenv{}

   step{context, expr} =
      @expander.step{context, @scope, expr}

   step_all{context, exprs} =
      @expander.step_all{context, @scope, exprs}

   expand{context, expr} =
      @expander.expand{context, @scope, expr}



class Expander:

   constructor{@stdenv, @generic_nodes, @pipeline} =
      ;; @pipeline.expand = [@]
      ;; @gensym = gensym
      @gensym = GenSym{"$"}

   mkenv{} =
      e = Env{}
      e.scopes[.top] = @stdenv.scopes[.top]
      e

   run_macro{m, context, scope, form, arg} =
      info = Info{context, scope, form, arg, @}
      rval = m{context, info, form, arg} !!
         E.match? {args => {{=> value}}} ->
            e = match value:
               === context ->
                  E.syntax.context{msg, {context = context, form = form}} where
                     msg = "The macro cannot be found in this context."
               other ->
                  find{match arg} =
                     === value ->
                        E.syntax.argument{msg, {context = context
                                                argument = arg
                                                form = form}} where
                           msg = "The macro expected something different."
                     {type, *xs} ->
                        xs each find! x ->
                           if x: return x
                        false
                     other ->
                        false
                  err = find{arg}
                  if err:
                     then: err
                     else: E.syntax.failure{msg, {form = form, value = value}} where
                        msg = "The macro expected something different (could not locate error in the source)."
            ;; e <<: form
            throw e
         e ->
            throw e

      @mkenv{}.mark{rval}


   ;; Perform one step of expansion.
   
   ;; Essentially, if the given expression is a macro call, it will be
   ;; expanded. If it is a plain macro, it will also be expanded, with
   ;; #void{} as its argument. Nothing else is expanded, and step does
   ;; not keep going recursively.
   
   ;; step is appropriate for use in macros that process specific node
   ;; types. For instance, pattern matching recognizes the #check{...}
   ;; node. expand will refuse that node, because it doesn't recognize
   ;; it, but step will let macros produce #check nodes and will leave
   ;; them untouched, so that the pattern matching macro can do something
   ;; with it and produce legal nodes.
   
   ;; context: the context in which the expression is evaluated (#expr,
   ;; #pattern, #blocktest, etc.)
   
   ;; scope: the scope in which we are located
   
   ;; expr: the expression to expand (one step)

   step{context, scope, expr} =
      helper = track_location{...} with {context, scope, match expr} ->
         #symbol{s} ->
            env = match expr:
               {=> env} -> expr.env
               other -> throw E.syntax.no_env with
                  "No environment was found to resolve"
                  {symbol = expr}
            match env.resolve{scope, s}:
               #macro{m} ->
                  match context:
                     #expr{.head} ->
                        #macro{m}
                     other ->
                        #bounce with @run_macro{m, context, scope, expr, #void{} <<: expr}
               other ->
                  expr
   
         #macro{m} ->
            match context:
               #expr{.head} ->
                  expr
               other ->
                  #bounce with @run_macro{m, context, scope, expr, #void{} <<: expr}
   
         #send{f, arg} ->
            match helper{#expr{.head}, scope, f}:
               #macro{m} ->
                  #bounce with @run_macro{m, context, scope, expr, arg}
               other ->
                  expr

         #parse{code, url = null} ->
            t = tokenize{Source{code, url}}
            p = parse{t}
            #bounce with helper{context, scope, expr.env.mark{p}}

         #nostep{x} ->
            x
   
         other ->
            expr
      
      helper{context, scope, expr}

   
   ;; Equivalent of step for a list of expressions. It recognizes
   ;; additional instructions:
   
   ;; #splice{...} -> splice expressions into the stream, expand them
   
   ;; #float{expr} -> float the expression to the top. If multiple floats
   ;;    are found, the first occurrences will be higher
   
   ;; #sink{expr} -> sinks the expression to the bottom. If multiple sinks
   ;;    are found, the first occurrences will be higher up
   
   ;; #restmacro{m} -> m is a macro that should take the remaining
   ;;    expressions in the list (those that come after itself), and
   ;;    return a new list of expressions.
   
   step_all{context, scope, {*[var stmts]}} =
      var pre = {}
      var bulk = {}
      var post = {}
      while stmts.length:
         current = stmts.shift{}
         match @step{context, scope, current}:
            #splice{*prepend} ->
               set stmts = prepend ++ stmts
            #float{stmt} ->
               pre ++= @step_all{context, scope, {stmt}}
            #sink{stmt} ->
               post ++= @step_all{context, scope, {stmt}}
            #restmacro{m} ->
               ;; We have to mark each resulting statement in case
               ;; it contains generated code.
               e = @mkenv{}
               set stmts = m{stmts} each
                  stmt -> e.mark{stmt}
            x ->
               bulk.push with x
      [pre ++ bulk] ++ post


   ;; Compute the full expansion of the provided expression. expand
   ;; is, more or less, the handler for the #expr context.

   expand{context, scope, expr} =
      helper = track_location{...} with {context, scope, var expr} ->
         set expr = @step{context, scope, expr}
   
         match expr:
   
            #symbol{s} ->
               {=> env} = expr
               match env.resolve{scope, s}:
                  undefined? ->
                     throw E.syntax.undeclared{"Undeclared variable: " + s, {node = expr}}
                     ;; #variable{"UNDECLARED__" + s}
                  other ->
                     #bounce{other}
   
            #value{_} ->
               expr
   
            #variable{_} ->
               expr
   
            #void{} ->
               expr
   
            #send{f, arg} ->
               #send with 
                  helper{#expr{.head}, scope, f}
                  helper{#expr{.tail}, scope, arg}
   
            #array{*args} ->
               newargs = @step_all{#expr{.array}, scope, args} each arg ->
                  helper{#expr{.expr}, scope, arg}
               #array{*newargs}

            #object{*args} ->
               newargs = @step_all{#expr{.object}, scope, args} each #array{k, v} ->
                  #array{helper{#expr{.expr}, scope, k}
                         helper{#expr{.expr}, scope, v}}
               #object{*newargs}

            #bind{variable and #symbol{s}, value, body} ->
               newscope = Scope{scope}
               {=> env} = variable
               env.bind{newscope, s, value}
               helper{context, newscope, body}
   
            #splice{*args} ->
               #bounce with
                  #multi{*args} &: {override_scope = true}
   
            #interactive{*args} ->
               #bounce with
                  #multi{*args} &: {override_scope = true, all_mutable = true}

            #multi{*args} ->
               newscope = if{expr.override_scope, scope, Scope{scope}}
               stepscope =
                  if{expr.nonrecursive, scope, newscope}
               var changes = false
               {=> newargs, => vars} = classify{.newargs, .vars} with
                  @step_all{#expr{.multi}, stepscope, args} each
                     #option{opt, value} ->
                        newscope.setopt{opt, value}
                        #ignore
                     #declare_raw{variable and #symbol{s}, value} ->
                        {=> env} = variable
                        env.bind{newscope, s} with value
                        set changes = true
                        #ignore
                     #declare{variable and #symbol{s}, value = null} ->
                        {=> env} = variable
                        if variable.use_previous and env.resolve{newscope, s}:
                           then:
                              #splice{}
                           else:
                              v = #variable{@gensym{s}} <<: variable
                              ;; v = #variable{s} <<: variable
                              v &: {mutable = expr.all_mutable or variable.mutable}
                              env.bind{newscope, s} with v
                              set changes = true
                              if value:
                                 then:
                                    #splice with
                                       #newargs{#assign{v, value}}
                                       #vars{v}
                                 else:
                                    #vars{v}
                     #declare{v and #variable{_}, value = null} ->
                        set changes = true
                        if value:
                           then:
                              #splice with
                                 #newargs{#assign{v, value}}
                                 #vars{v}
                           else:
                              #vars{v}
                     #undeclare{#symbol{s} and variable} ->
                        {=> env} = variable
                        env.bind{newscope, s} with undefined
                        set changes = true
                        #ignore
                     other ->
                        #newargs{other}
               exp{s} =
                  ;; enumerate{newargs} each {i, arg} ->
                  ;;    helper{#expr{...}, s, arg} with
                  ;;       if{i === newargs.length - 1, .expr, .ignore}
                  stepped = enumerate{newargs} each {i, arg} ->
                     @step{#expr{...}, s, arg} with
                        if{i === [newargs.length - 1], .expr, .ignore}
                  stepped each arg -> helper{#expr{.expr}, s, arg}
               if changes:
                  then: #scope{vars, #multi{*exp{newscope}}}
                  else: #multi{*exp{scope}}
   
            #data{*args} ->
   
               var is_obj = false
               var obj = #object{}
               var arr = #array{}
               arr_parts = {}
               obj_parts = {}
   
               new_arr_part{} =
                  match arr:
                     #array{} -> false
                     other ->
                        arr_parts.push{arr}
                        set arr = #array{}
   
               new_obj_part{} =
                  match obj:
                     #object{} -> false
                     other ->
                        obj_parts.push{obj}
                        set obj = #object{}
   
               @step_all{#expr{.data}, scope, args} each
                  #assoc{} ->
                     set is_obj = true
                  #assoc{k, v} ->
                     set is_obj = true
                     obj.push with #array{k, v}
                  #dynsplice{expr} ->
                     new_arr_part{}
                     arr_parts.push{expr}
                  #objsplice{expr} ->
                     set is_obj = true
                     new_obj_part{}
                     obj_parts.push{expr}
                  other ->
                     arr.push{other}
   
               new_arr_part{}
               new_obj_part{}
   
               r = match arr_parts:
                  {} when is_obj ->
                     util.construct{obj_parts, ..., #object{}} with
                        {x, rest} -> '[^x &: ^rest]

                  when is_obj ->
                     throw E.syntax.array.object{"Cannot mix array and object notations."}
   
                  other ->
                     util.construct{arr_parts.reverse{}, ..., #array{}} with
                        {x, rest} -> '[^rest].concat{^x}
               helper{context, scope, @mkenv{}.mark{r}}
   
            #assign{target, value} ->
               t = helper{#expr{.expr}, scope, target}
               match t:
                  #variable when [not t.mutable
                                  \ and t.assigned
                                  \ and t.assigned.group_id !== target.group_id] ->
                     throw E.syntax{msg, {variable = target, loc = t.assigned}} where
                        msg = {"Variable was declared as read-only. Declare it as"
                               "mutable at the origin with `var` (if you have access"
                               "to the declaration) or declare a new variable with"
                               "`let` or `var` or remove the original binding with"
                               "`delete`"}.join{" "}
                  ;; #variable when [not t.mutable and t.assigned] ->
                  ;;    console.log with {target, t.assigned.group_id}
                  #macro{m} ->
                     #bounce with m{#assign{}, scope, expr, value}
                     ;; throw E.syntax{msg, {variable = target}} where
                     ;;    msg = {"This variable is a macro and cannot be assigned to."
                     ;;           "Use `let` to redeclare it or `delete` to undeclare it"}.join{" "}
                  otherwise ->
                     t.assigned = target

               #assign{t} with
                  helper{#expr{.expr}, scope, value}
   
            #lambda{bindings, body, generator} ->
               newscope = Scope{scope}
               #lambda with
                  bindings each
                     #symbol{b} and {=> env} ->
                        [env.bind{newscope, b, v}, v] where
                           v = #variable{@gensym{b}}
                           ;; v = #variable{b}
                     #variable and v ->
                        v
                     other ->
                        throw E.syntax.lambda.binding{"Not a valid binding.", {node = other}}
                  helper{#expr{.expr}, newscope, body}
                  generator
   
            #use{match, x} ->
               String? name ->
                  var s = scope
                  while s:
                     if [s.name.slice{0, name.length + 1} === [name + "/"]]:
                        then: break
                        else: set s = s.parent
                  if s:
                     then: helper{context, s, x}
                     else: throw E.syntax.noscope{"Could not find a scope tagged: " + name}
               newscope ->
                  helper{context, newscope, x}

            #tagscope{String? tag, body} ->
               helper{context, Scope{scope, @gensym{tag + "/"}}, body}

            {type, *args} when [@generic_nodes.indexOf{type} !== -1] ->
               {type} ++
                  args each arg ->
                     helper{#expr{.expr}, scope, arg}

            #mismix{ops, *args} ->
               throw E.syntax.mismatch{msg, tokens} where
                  tokens = object with enumerate{ops} each {i, op} ->
                     {"token" + String{i + 1}, op}
                  msg = "These operators or brackets cannot be mixed together."

            #char{c} ->
               throw E.syntax.illegal_character with
                  "An illegal character was found: " + c
                  {node = expr}

            other ->
               throw E.syntax.illegal_node with
                  "An illegal node was found: " + other
                  {node = other, context = context}

      helper{context, scope, expr}



mac1{f} = 
   #macro with {context, scope, form, #data{expr}} ->
      f{expr}

__chk_ncache = {=}
__chk_scache = {=}

checker_db{match} =
   null? -> checker_db.null
   undefined? -> checker_db.undefined
   ===true -> checker_db.true
   ===false -> checker_db.false
   Number? n ->
      ;; I believe that the reason why we are caching these macros is
      ;; so that they can be compared with ==. This is done when
      ;; optimizing patterns for example. I wrote this way after the
      ;; fact, so I'm not 100% sure, but that's the only explanation I
      ;; can think of. There's probably a better way to do all this.
      if [__chk_ncache[n]]:
         then: __chk_ncache[n]
         else:
            v = mac1{{x} -> '[^x === ^=n]}
            __chk_ncache[n] = v
            v
   String? s ->
      if Object.prototype.hasOwnProperty.call{__chk_scache, s}:
         then: __chk_scache[s]
         else:
            v = mac1{{x} -> '[^x === ^=s]}
            __chk_scache[s] = v
            v

checker_db &: {
   String = mac1 with {x} -> '[typeof{^x} === "string"]
   Number = mac1 with {x} -> '[typeof{^x} === "number"]
   Array = mac1 with {x} -> '[[instanceof]{^x, Array}]
   true = mac1 with {x} -> x
   false = mac1 with {x} -> '[not ^x]
   null = mac1{{x} -> '[^x === ^=null]}
   undefined = mac1{{x} -> '[^x === ^=undefined]}
}

topscope = Scope{null, .top}

