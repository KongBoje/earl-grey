

patch_array{} =
   r = {}
   for [i = 0, i < arguments.length, i++]:
      r := r.concat{___js_fetch{arguments, i}}
   r

StructFactory{name} =
   make{} =
      r = Array.prototype.slice.call{arguments, 0}
      r["#"] := name
      r
   make.___project := {value} ->
      ? | [value instanceof Array and value["#"] == name] =>
          {true, value}
        | else =>
          {true, make{value}}
   make.___check := {value} ->
      ? | [value instanceof Array and value["#"] == name] =>
          true
        | else =>
          false
   make.___deconstruct := {value} ->
      ? | [value instanceof Array and value["#"] == name] =>
          {true, value.slice{0}}
        | else =>
          {false, false}
   make

XStruct{name} =
   r = Array.prototype.slice.call{arguments, 1}
   r["#"] := name
   r

XStruct.___check := {value} ->
   ? | [value instanceof Array] => value["#"] != undefined
     | else => false

XStruct.___deconstruct := {value} ->
   ? | [value instanceof Array and value["#"] != undefined] =>
       {value["#"]}.concat{value.slice{0}}
     | else => throw "cannot deconstruct"

Struct = XStruct


pr{x} =
   r = repr{x}
   pre = String.fromCharCode{27} + "[?0;7y+h <div class=\"ug\">"
   post = "</div>" + String.fromCharCode{7}
   console.log with [pre + r + post]


[cls /// contents] =
   contents |>
      String? -> "<span class=\"" + cls + "\">" + contents + "</span>"
      other -> "<span class=\"" + cls + "\">" + contents.join{""} + "</span>"

repr{x} =
   x |>
      true? -> .special /// [.true /// "true"]
      false? -> .special /// [.false /// "false"]
      null? -> .special /// [.nil /// "null"]
      undefined? -> .special /// [.nil /// "undefined"]
      Number? -> .num /// String{x}
      String? -> .str /// x
      entries ->
         tag = entries"#"
         tag |>
            undefined? ->
               .sequence /// entries.map{{x} -> repr{x}}
            other ->
               .struct /// {.sym /// tag, .sequence /// entries.map{{x} -> repr{x}}}



send{obj, msg} =
   msg |>
      [String? or Number?] -> ___js_fetch{obj, msg}
      other -> obj.___send{msg}

Function.prototype.___send := {args} ->
   this.apply{this, args}


checker{type} =
   type.___check |>
      undefined? ->
         {value} -> value instanceof type
      f ->
         {value} -> f{value}


projector{type} = {value} ->
   type.___project |>
      undefined? ->
         ? | [value instanceof type] => {true, value}
           | else => {false, null}
      f -> f{value}

Array.___project := {value} -> value |>
   Array? -> {true, value}
   _ -> {true, {value}}



deconstructor{type} = {value} ->
   type.___deconstruct |>
      undefined? ->
         ? | [value instanceof Array] => {true, value}
           | else => {false, null}
      f -> f{value}

