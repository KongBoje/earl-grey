
require:
   "./earl-grey" as eg
   "./pp" ->
      <>, Node
   "./util" -> [enumerate, items]
   "./location" ->
      Source
      display_error
   fs, path, vm

provide:
   run


usage = "
usage:

earl translate <file> [outfile]
  Translate a source file, output to outfile. Without outfile
  specified, print to standard out.

earl translate <directory> <outdir>
  Translate all the .eg files in the specified directory.

earl run [file] [arguments...]
  Run the specified file as a script.
"

walk{dir, partial, f} =
   stats = fs.statSync{dir}
   if stats.isDirectory{}:
      then:
         f{.dir, partial}
         fs.readdirSync{dir} each file ->
            walk{newdir, newpartial, f} where
               newdir = path.join{dir, file}
               newpartial = path.join{partial, file}
      else:
         f{.file, partial}

copy{src, dest} =
   data = fs.readFileSync{src, .binary}
   fs.writeFileSync{dest, data, .binary}


libdata = fs.readFileSync{path.join{__dirname, "lib.raw.js"}}


gen{text, file, prelude = null} =
   eg.generate{Source{text, path.resolve{file}}, prelude}

gen2{text, file} =
   g = eg.Generator{}
   g.generate{Source{text, path.resolve{file}}}


run{cmd} =
   _run{cmd} !!
      e ->
         display_error{e}

_run{match} =

   {} or {.i or "in" or .interactive} ->
      require: repl
      ;; vm.runInThisContext{libdata, "stdin"}
      settings = {
         prompt = "<> "
         ignoreUndefined = true
         eval{input, context, filename, callback} =
            g = eg.Generator{}
            result = [execute{} !! e -> handle{e}] where
               execute{} =
                  text = g.generate{Source{input.slice{1, -1}, "<interactive>"}}
                  vm.runInThisContext{text, "stdin"}
               handle{e} =
                  display_error{e}
                  ;; console.log{e.stack or e}
                  undefined
            callback{null, result}
      }
      run = repl.start with settings
      run.on{.exit} with {} -> run.outputStream.write{"\n"}

   {.run, file} ->
      data = fs.readFileSync{file, .utf8}
      eval with gen2{data, file, libdata}

   {.tr or .translate, file, *args} ->

      out = args[0]

      stats = fs.statSync{file}

      match:
         when stats.isDirectory{} ->
            walk{file, "/"} with {*match} ->
               {.dir, d} ->
                  from = path.join{file, d}
                  to = path.join{out, d}
                  fs.mkdirSync{to} !! "ignore error"
               {.file, match} ->
                  R'[start, {*any}, ".eg", end]? {x, name} ->
                     from = path.join{file, x}
                     to = path.join{out, name + ".js"}
                     data = fs.readFileSync{from, .utf8}
                     prelude = if{R'[".raw.eg", end]? x, "", libdata}
                     fs.writeFileSync{to} with
                        gen2{data, from, prelude} + "\n"
                  f ->
                     from = path.join{file, f}
                     to = path.join{out, f}
                     copy{from, to}

         when out ->
            data = fs.readFileSync{file, .utf8}
            fs.writeFileSync{out} with
               gen2{data, file, libdata} + "\n"

         otherwise ->
            data = fs.readFileSync{file, .utf8}
            console.log with gen2{data, file, ""} ;; libdata}

   ;; {.tr2, file, *args} ->

   ;;    out = args[0]

   ;;    stats = fs.statSync{file}

   ;;    match:
   ;;       when out ->
   ;;          data = fs.readFileSync{file, .utf8}
   ;;          fs.writeFileSync{out} with
   ;;             gen2{data, file, libdata} + "\n"

   ;;       otherwise ->
   ;;          data = fs.readFileSync{file, .utf8}
   ;;          console.log with gen2{data, file, ""} ;; libdata}

   {.tok, s} ->
      eg.tokenize{Source{s, null}} each token ->
         <> token
         <> token.location.ref{}
         <> token.location.highlight{}

   {.pa, s} ->
      walkloc{node and match} =
         #symbol{x} ->
            <> node
            <> node.location and node.location.highlight{}
         #value{x} ->
            <> node
            <> node.location and node.location.highlight{}
         {type, *args} ->
            <> node
            <> node.location and node.location.highlight{}
            args each arg -> walkloc{arg}

      walkloc with
         eg.parse{tokens} where
            tokens = eg.tokenize{Source{s, null}}

   {.runs, data} ->
      <> eval{gen2{data, "<command>", libdata}}

   other ->
      console.log with usage

