
req:
   "./earl-grey" as eg
   fs, path, vm


usage = "
usage:

earl translate <file> [outfile]
  Translate a source file, output to outfile. Without outfile
  specified, print to standard out.

earl translate <directory> <outdir>
  Translate all the .eg files in the specified directory.

earl run [file] [arguments...]
  Run the specified file as a script.
"

libdata = fs.readFileSync{path.join{__dirname, "lib.raw.js"}}

run{|>} =

   {} or {.i or .[in] or .interactive} ->
      repl = require{.repl}
      ctx = vm.createContext{global}
      vm.runInContext{libdata, ctx, "stdin"}
      settings = {
         prompt = "<> "
         ignoreUndefined = true
         eval{input, context, filename, callback} =
            text = eg.generate{input.slice{1, -1}}
            result = vm.runInContext{text, ctx, "stdin"} !!
               e -> console.log{e.stack}
            callback{null, result}
      }
      run = repl.start with settings
      run.on{.exit} with {} -> run.outputStream.write{"\n"}

   {.run, file} ->
      data = fs.readFileSync{file, .utf8}
      code = eg.generate{data, libdata}
      ;; vm.runInThisContext{code, file}
      eval{code}

   {.tr or .translate, file, args*} ->

      out = args[0]

      stats = fs.statSync{file}

      ? | stats.isDirectory{} =>
          d = fs.readdirSync{file}
          ? | not fs.existsSync{out} =>
              fs.mkdirSync{out}
          d.forEach with {x} ->
             ? | x.match{Rx[".eg", end]} =>
                 data = fs.readFileSync{path.join{file, x}, .utf8}
                 outfile = path.join{out, x.replace{".eg", ".js"}}
                 fs.writeFileSync{outfile} with
                    eg.generate{data, prelude} + "\n" where
                       prelude =
                          ? | x.match{Rx[".raw.eg", end]} => ""
                            | else => libdata

        | out =>
          data = fs.readFileSync{file, .utf8}
          fs.writeFileSync{out} with [eg.generate{data, libdata} + "\n"]

        | else =>
          data = fs.readFileSync{file, .utf8}
          console.log with eg.generate{data, ""} ;; libdata}

   other ->
      console.log with usage


exports.run := run

