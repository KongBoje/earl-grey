
require:
   "./location" ->
      Source
      format_error
      highlight_locations
   fs, path, mkdirp
   "earlgrey-runtime/5"


provide:
   run
   display-error

globals:
   JSON


usage = "Usage: earl [global options] command [options] [arguments...]

earl run [options] [file] [arguments...]
  Run the specified file as a script. The arguments are available in
  process.argv.slice{2} of the script.
  Options:
    -e  --eval <code>   Run the provided code instead of reading from a file.
    -p  --print         Print the result of the evaluation to standard out.
    -i  --interactive   Start an interactive interpreter after execution
                        in the global environment of the script.
    -r  --recompile     Recompile scripts instead of using the cache
    -v  --verbose       Print information about the operations performed
    -5  --es5           Generate and run EcmaScript v5
    -6  --es6           Generate and run EcmaScript v6 (default)

earl compile [options] [file... | dir]
  Compile the specified source files into .js files. The files will be
  placed next to the originals.
  If a directory is given, all .eg files in the directory hierarchy
  will be compiled. The -o option can be used to compile the files
  into a different directory (all non-eg files will be copied over).
  Options:
    -o  --output <dir>  Output in given directory.
    -p  --print         Print the compiled JavaScript to standard out.
                        No files are created.
    -e  --eval <code>   Compile the provided code instead of reading from a file.
    -n  --noboil        Don't output boilerplate code (useful with -p)
    -s  --sourcemaps    Output source maps for the generated files
    -r  --recompile     Recompile scripts instead of using the cache
    -v  --verbose       Print information about the operations performed
    -5  --es5           Generate EcmaScript v5
    -6  --es6           Generate EcmaScript v6 (default)

earl
  Start an interactive session.

Global options:
  -h  --help      Print this message.
  -v  --version   Print the version
"


display-error{match e, rethrow = false} =
   E.syntax? {args => {args}} ->
      console.error{String{e}}
      hls = {.hl1, .hl2, .hl3, .hl4}
      locs = enumerate{items{args}} each
         {i, {key, arg}} when arg and arg.location ->
            {arg.location, hls[i mod 4]}
      var accum = "\n"
      pr{highlight_locations{locs, 0}} where pr{match} =
         String? s ->
            accum += s
         ENode? n ->
            {var pre, var post} = match n:
               [.hl1 %]? -> {"\x1B[1;32m", "\x1B[0m"}
               [.hl2 %]? -> {"\x1B[1;33m", "\x1B[0m"}
               [.hl3 %]? -> {"\x1B[1;36m", "\x1B[0m"}
               [.hl4 %]? -> {"\x1B[1;35m", "\x1B[0m"}
               [.lineno %]? ->
                  {"\x1B[1m" + Array{3 - l}.join{" "}
                   ":\x1B[0m "} where
                     l = Math.floor{Math.log{n.children[0]} / Math.log{10}}
               else -> {"", ""}
            if [.sourcepos %]? n:
               pre += " "
            accum += pre
            n.children each child -> pr{child}
            accum += post
            if [div %]? n and [accum[accum.length - 1] != "\n"]:
               accum += "\n"
         Array? a ->
            a each child -> pr{child}
         other ->
            accum += String{other}
      console.error{accum}

   when rethrow ->
      throw e

   else ->
      console.error{e.stack or String{e}}


usage_error{message} =
   console.error{usage}
   console.error{message}
   process.exit{1}


extract_options{clone! argv, opttable, optmessage} =
   results = {=}
   var associate = null

   process_option{original, opt, last} =
      match opttable[opt]:
         undefined? ->
            usage_error{"Unrecognized " + optmessage + ": " + original}
         #flag{name} ->
            results[name] = true
         #value{name} when last ->
            results[name] = true
            associate = value -> results[name] = value
         #value{name} ->
            results[name] = true

   lenient-parse{x} =
      try:
         JSON.parse{x}
      catch e:
         x

   while argv.length:
      arg = argv.shift{}
      match arg:
         R"^--([a-zA-Z_0-9\-]+)=(.*)"! {_, opt, value} ->
            process_option{arg, opt, true}
            associate{value}
            associate = null

         R"^--([a-zA-Z_\-0-9]+)"! {_, opt} ->
            process_option{arg, opt, true}

         R"^-([a-zA-Z_0-9]+)"! {_, opts} ->
            enumerate{opts} each {i, ch} ->
               process_option{arg, ch, i == opts.length - 1}

         R"^--:([a-zA-Z_0-9\-]+)=(.*)"! {_, opt, value} ->
            results.parameters or= {=}
            results.parameters[opt] = lenient-parse{value}

         R"^--:no-([a-zA-Z_\-0-9]+)"! {_, opt} ->
            results.parameters or= {=}
            results.parameters[opt] = false

         R"^--:([a-zA-Z_\-0-9]+)"! {_, opt} ->
            results.parameters or= {=}
            results.parameters[opt] = true
            ;; associate = value -> results.parameters[opt] = lenient-parse{value}

         other when associate ->
            associate{other}
            associate = null

         other ->
            argv.unshift{other}
            break

   {results, argv}





walk{dir, partial, f} =
   stats = fs.statSync{dir} !! e ->
      print "Could not stat: " + dir
      return false

   if stats.isDirectory{}:
      then:
         f{.dir, partial}
         fs.readdirSync{dir} each file ->
            walk{newdir, newpartial, f} where
               newdir = path.join{dir, file}
               newpartial = path.join{partial, file}
      else:
         f{.file, partial}

copy{src, dest} =
   try:
      data = fs.readFileSync{src, .binary}
      fs.writeFileSync{dest, data, .binary}
   catch e:
      print "Could not copy: " + src


_gen{text, file, opts} =
   require: "./earl-grey" as eg
   g = eg.Generator{opts}
   g.generate{Source{text, path.resolve{file}}}


interactive{g, e, o} =
   require: repl
   g.interactive = true
   settings = {
      prompt = "<> "
      ignoreUndefined = true
      async eval{input, context, filename, callback} =
         try:
            inp = match input:
               R"^\((.*\n)\)$"! {_, x} -> x
               R"^\((.*)\)\n$"! {_, x} -> x
               else -> input
            if inp.trim{} == "":
               callback{null, undefined}
            else:
               var text = g.generateInteractive{Source{inp, "<interactive>"}, o}
               result = await e{text}
               callback{null, result}
         catch e:
            display-error{e}
            callback{null, undefined}
   }
   runner = repl.start with settings
   runner.on{.exit} with {} -> runner.outputStream.write{"\n"}


compile_path{p, opts} =

   stats = fs.statSync{p}

   match:
      when stats.isDirectory{} ->
         if opts.print:
            usage_error{"Cannot use --print when compiling a directory"}
         out = opts.output or p
         walk{p, "/"} with {*match} ->
            {.dir, d} ->
               from = path.join{p, d}
               if opts.output:
                  to = path.join{out, d}
                  dirstat = fs.lstatSync{to} !! e -> null
                  if not dirstat or not dirstat.isDirectory{}:
                     mkdirp.sync{to} !! e ->
                        print e
                        print 'Could not create directory {to}'
            {.file, match} ->
               R`[start, {*any}, ".eg", end]`! results when results ->
                  {x, name} = results
                  from = path.join{p, x}
                  to = path.join{out, name + ".js"}

                  if not opts.recompile:
                     fstat = fs.statSync{from} !! e -> null
                     tstat = fs.statSync{to} !! e -> null
                     if fstat and tstat and fstat.mtime.getTime{} < tstat.mtime.getTime{}:
                        if opts.verbose:
                           print "No change: " + from
                        return true

                  data =
                     try:
                        fs.readFileSync{from, .utf8}
                     catch e:
                        print "Could not read: " + from
                        return false
                  if opts.verbose:
                     console.log{"Compiling:", from}
                  {=> code, => map} = _gen{data, from, opts}
                  try:
                     fs.writeFileSync{to, code + "\n"}
                     if map:
                        fs.writeFileSync{to + ".map", map}
                  catch e:
                     print "Could not write: " + to
               when not opts.output ->
                  null
               f ->
                  ;; copy files if output directory is given
                  from = path.join{p, f}
                  to = path.join{out, f}
                  copy{from, to}

      else ->
         data = fs.readFileSync{p, .utf8}
         {=> code, => map} = _gen{data, p, opts}
         match:
            when opts.print ->
               require: "js-beautify" -> js as beaut
               console.log with beaut{code}
            when opts.output ->
               fs.writeFileSync{opts.output, code + "\n"}
               if map:
                  fs.writeFileSync{opts.output + ".map", map}
            else ->
               noext = match p:
                  R"^(.*).eg$"! {_, name} -> name
                  name -> name
               fs.writeFileSync{noext + ".js", code + "\n"}
               if map:
                  fs.writeFileSync{noext + ".js.map", map}


run{argv} =
   {opts, cmd} =
      extract_options{argv, defns, "global option"} where defns = {
         h = #flag{"help"}
         help = #flag{"help"}

         v = #flag{"version"}
         version = #flag{"version"}
      }
   _run{cmd, opts} !!
      e ->
         display-error{e, true}
         process.exit{1}


_run{match, opts} =

   when opts.help ->
      console.log with usage

   when opts.version ->
      require: "./version" -> version
      print 'Earl Grey version {version}'

   {} or {.run} ->
      _run{{.run, "-i"}, opts}

   {.run, *rawargs} ->

      {o, rest} = extract_options{rawargs, defns, "option for run"} where defns = {
         e and eval        = #value{.evaluate}
         v and verbose     = #flag{.verbose}
         i and interactive = #flag{.interactive}
         r and recompile   = #flag{.recompile}
         p and .print      = #flag{.print}
         "6" and es6       = #flag{.es6}
         "5" and es5       = #flag{.es5}
      }
      o.noboil = true
      o.runtime = if{o.noboil, null, "earlgrey-runtime"}

      if not o.es6 and process.title == .node
         \ and parseInt{process.version.split{"."}[0].slice{1}} < 4:
         o.es5 = true

      require: "./register" as register

      register.install{o}

      {file, wd, args} =
         if o.evaluate:
            then:
               {null, process.cwd{}, rest}
            else:
               match rest.shift{}:
                  undefined? when o.interactive ->
                     {null, process.cwd{}, rest}
                  undefined? ->
                     usage_error{"No filename specified."}
                  path.resolve! file ->
                     {file, file, rest}

      var g = null
      var e = null
      var result = null

      if file == null:
         require: "./earl-grey" as eg
         e = eg.evaluator with {
            filename = "<repl>"
            showname = "<repl>"
            cwd = "<repl>"
         }
         g = eg.Generator{o}
         if o.evaluate:
            result = e{g.generate{Source{o.evaluate, "<repl>"}}.code}

      else:
         require: "./evaluator" -> evaluator as ev
         process.argv = {"earl-run", file} ++ rest

         {g, compiled, srcfile} = register.getCache{file, o}
         e = ev with {
            filename = file
            showname = srcfile
            cwd = file
         }
         result = e{compiled}

      if o.print:
         print result
      if o.interactive:
         interactive{g, e, o}


   {.compile, *rawargs} ->

      {o, rest} = extract_options{rawargs, defns, "option for compile"} where defns = {
         o and output     = #value{.output}
         p and "print"    = #flag{.print}
         e and eval       = #value{.evaluate}
         n and noboil     = #flag{.noboil}
         s and sourcemaps = #flag{.sourceMap}
         r and recompile  = #flag{.recompile}
         "6" and es6      = #flag{.es6}
         "5" and es5      = #flag{.es5}
         v and verbose    = #flag{.verbose}
      }
      o.runtime = if{o.noboil, null, "earlgrey-runtime"}

      require: "./register" as register
      register.install{o}

      match rest:
         when o.evaluate ->
            {=> code, => map} = _gen{o.evaluate, "<cli>", o}
            match:
               when o.output ->
                  fs.writeFileSync{o.output} with
                     code + "\n"
               else ->
                  require: "js-beautify" -> js as beaut
                  console.log with beaut{code}
         {} ->
            usage_error{"Must provide at least one file or directory to compile."}
         {p} ->
            compile_path{p, o}
         when o.output ->
            usage_error with
               "The -o option cannot be used if more than one file or directory is compiled."
         {*paths} ->
            paths each p ->
               compile_path{p, o}

   {.clean, var root = ""} ->
      require: del
      if root === "": root = "."
      paths = del.sync{'{root}/**/egcache/'}
      paths each path ->
         print 'Deleted {path}'

   stuff ->
      usage_error with
         "Invalid use. Did you mean: earl run " + stuff.join{" "}
