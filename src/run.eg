
require:
   "./earl-grey" as eg
   "./pp" ->
      <>
   "./location" ->
      Source
      format_error
      highlight_locations
      ;; display_error
   fs, path

provide:
   run


usage = "Usage: earl [global options] command [options] [arguments...]

earl run [options] [file] [arguments...]
  Run the specified file as a script. The arguments are available in
  process.argv.slice{2} of the script.
  Options:
    -e  --eval <code>  Run the provided code instead of reading from a file.
    -p  --print        Print the result of the evaluation to standard out.
    -i  --interactive  Start an interactive interpreter after execution
                       in the global environment of the script.

earl compile [options] [file... | dir]
  Compile the specified source files into .js files. The files will be
  placed next to the originals.
  If a directory is given, all .eg files in the directory hierarchy
  will be compiled. The -o option can be used to compile the files
  into a different directory (all non-eg files will be copied over).
  Options:
    -o  --output <dir>  Output in given directory.
    -p  --print         Print the compiled JavaScript to standard out.
                        No files are created.
    -e  --eval <code>   Compile the provided code instead of reading from a file.
    -n  --noboil        Don't produce boilerplate code (useful with -p)

earl
  Start an interactive session.

Global options:
  -h  --help      Print this message.
  -v  --version   Print the version
"


display_error{match e} =
   E.syntax? {args => {args}} ->
      console.error{String{e}}
      hls = {.hl1, .hl2, .hl3, .hl4}
      locs = enumerate{items{args}} each?
         {i, {key, arg}} when arg and arg.location ->
            {arg.location, hls[i mod 4]}
      var accum = "\n"
      pr{highlight_locations{locs, 0}} where pr{match} =
         String? s ->
            accum += s
         Node? n ->
            {var pre, var post} = match n:
               [.hl1 %]? -> {"\x1B[1;32m", "\x1B[0m"}
               [.hl2 %]? -> {"\x1B[1;33m", "\x1B[0m"}
               [.hl3 %]? -> {"\x1B[1;36m", "\x1B[0m"}
               [.hl4 %]? -> {"\x1B[1;35m", "\x1B[0m"}
               [.lineno %]? ->
                  {"\x1B[1m" + Array{3 - l}.join{" "}
                   ":\x1B[0m "} where
                     l = Math.floor{Math.log{n.children[0]} / Math.log{10}}
               else -> {"", ""}
            if [.sourcepos %]? n:
               pre += " "
            accum += pre
            n.children each child -> pr{child}
            accum += post
            if [div %]? n and [accum[accum.length - 1] != "\n"]:
               accum += "\n"
         Array? a ->
            a each child -> pr{child}
         other ->
            accum += String{other}
      console.error{accum}

   else ->
      console.error{e.stack or String{e}}


usage_error{message} =
   console.error{usage}
   console.error{message}
   process.exit{1}


extract_options{clone! argv, opttable, optmessage} =
   results = {=}
   var associate = null

   process_option{original, opt, last} =
      match opttable[opt]:
         undefined? ->
            ;; throw E.option{"Unrecognized option: " + original, original}
            usage_error{"Unrecognized " + optmessage + ": " + original}
         #flag{name} ->
            results[name] = true
         #value{name} when last ->
            associate = name
         #value{name} ->
            results[name] = true

   while argv.length:
      arg = argv.shift{}
      match arg:
         R"^--([a-zA-Z_\\-]+)=(.*)"! {_, opt, value} ->
            process_option{arg, opt, true}
            results[associate] = value
            associate = null

         R"^--([a-zA-Z_\\-]+)"! {_, opt} ->
            process_option{arg, opt, true}

         R"^-([a-zA-Z_]+)"! {_, opts} ->
            opts each
               last ch ->
                  process_option{arg, ch, true}
               ch ->
                  process_option{arg, ch}

         other when associate ->
            results[associate] = other
            associate = null

         other ->
            argv.unshift{other}
            break

   {results, argv}





walk{dir, partial, f} =
   stats = fs.statSync{dir}
   if stats.isDirectory{}:
      then:
         f{.dir, partial}
         fs.readdirSync{dir} each file ->
            walk{newdir, newpartial, f} where
               newdir = path.join{dir, file}
               newpartial = path.join{partial, file}
      else:
         f{.file, partial}

copy{src, dest} =
   data = fs.readFileSync{src, .binary}
   fs.writeFileSync{dest, data, .binary}


gen{text, file, noboil = false} =
   g = eg.Generator{}
   g.generate{Source{text, path.resolve{file}}, not noboil}



interactive{g, e} =
   require: repl
   g.interactive = true
   settings = {
      prompt = "<> "
      ignoreUndefined = true
      eval{input, context, filename, callback} =
         result = [execute{} !! e -> handle{e}] where
            execute{} =
               text = g.generate{Source{input.slice{1, -1}, "<interactive>"}}
               e{text}
            handle{e} =
               display_error{e}
               undefined
         callback{null, result}
   }
   runner = repl.start with settings
   runner.on{.exit} with {} -> runner.outputStream.write{"\n"}


compile_path{p, opts} =

   stats = fs.statSync{p}

   match:
      when stats.isDirectory{} ->
         if opts.print:
            usage_error{"Cannot use --print when compiling a directory"}
         out = opts.output or p
         walk{p, "/"} with {*match} ->
            {.dir, d} ->
               from = path.join{p, d}
               if opts.output:
                  to = path.join{out, d}
                  fs.mkdirSync{to} !! e -> "ignore error"
            {.file, match} ->
               R'[start, {*any}, ".eg", end]! results when results ->
                  {x, name} = results
                  from = path.join{p, x}
                  to = path.join{out, name + ".js"}
                  data = fs.readFileSync{from, .utf8}
                  fs.writeFileSync{to} with
                     gen{data, from, opts.noboil} + "\n"
               when not opts.output ->
                  null
               f ->
                  ;; copy files if output directory is given
                  from = path.join{p, f}
                  to = path.join{out, f}
                  copy{from, to}

      else ->
         data = fs.readFileSync{p, .utf8}
         code = gen{data, p, opts.noboil}
         match:
            when opts.print ->
               require: "js-beautify" -> js as beaut
               console.log with beaut{code}
            when opts.output ->
               fs.writeFileSync{opts.output} with
                  code + "\n"
            else ->
               noext = match p:
                  R"^(.*).eg$"! {_, name} -> name
                  name -> name
               fs.writeFileSync{noext + ".js"} with
                  code + "\n"


run{argv} =
   {opts, cmd} =
      extract_options{argv, ..., "global option"} with {
         h = #flag{"help"}
         help = #flag{"help"}

         v = #flag{"version"}
         version = #flag{"version"}
      }
   _run{cmd, opts} !!
      e ->
         display_error{e}
         process.exit{1}


_run{match, opts} =

   when opts.help ->
      console.log with usage

   when opts.version ->
      console.log with
         "Earl Grey version"
         eg.version

   {} or {.run} ->
      _run{{.run, "-i"}, opts}

   {.run, *rawargs} ->

      {o, rest} = extract_options{rawargs, ..., "option for run"} with {
         e = #value{.evaluate}
         eval = #value{.evaluate}

         p = #flag{.print}
         print = #flag{.print}

         i = #flag{.interactive}
         interactive = #flag{.interactive}
      }

      {file, wd, data, args} =
         if o.evaluate:
            then:
               {"<repl>", process.cwd{}, o.evaluate, rest}
            else:
               match rest.shift{}:
                  undefined? when o.interactive ->
                     {"<repl>", process.cwd{}, "", rest}
                  undefined? ->
                     usage_error{"No filename specified."}
                  path.resolve! file ->
                     {file, file, data, rest} where
                        data = fs.readFileSync{file, .utf8}

      process.argv = {"earl-run", file} ++ rest

      e = eg.evaluator with {
         filename = file
         showname = file
         cwd = file
      }

      g = eg.Generator{o.interactive}
      result = e with g.generate{Source{data, file}}
      if o.print:
         console.log with result
      if o.interactive:
         interactive{g, e}

   {.compile, *rawargs} ->

      {o, rest} = extract_options{rawargs, ..., "option for compile"} with {
         o = #value{.output}
         output = #value{.output}

         p = #flag{.print}
         print = #flag{.print}

         e = #value{.evaluate}
         eval = #value{.evaluate}

         n = #flag{.noboil}
         noboil = #flag{.noboil}
      }

      match rest:
         when o.evaluate ->
            code = gen{o.evaluate, "<cli>", o.noboil}
            match:
               when o.output ->
                  fs.writeFileSync{o.output} with
                     code + "\n"
               else ->
                  console.log with code
         {} ->
            usage_error{"Must provide at least one file or directory to compile."}
         {p} ->
            compile_path{p, o}
         when o.output ->
            usage_error with
               "The -o option cannot be used if more than one file or directory is compiled."
         {*paths} ->
            paths each p ->
               compile_path{p, o}


   {.tr or .translate, file, *args} ->

      out = args[0]

      stats = fs.statSync{file}

      match:
         when stats.isDirectory{} ->
            walk{file, "/"} with {*match} ->
               {.dir, d} ->
                  from = path.join{file, d}
                  to = path.join{out, d}
                  fs.mkdirSync{to} !! e -> "ignore error"
               {.file, match} ->
                  R'[start, {*any}, ".eg", end]! results when results ->
                     {x, name} = results
                     from = path.join{file, x}
                     to = path.join{out, name + ".js"}
                     data = fs.readFileSync{from, .utf8}
                     fs.writeFileSync{to} with
                        gen{data, from} + "\n"
                  f ->
                     from = path.join{file, f}
                     to = path.join{out, f}
                     copy{from, to}

         when out ->
            data = fs.readFileSync{file, .utf8}
            fs.writeFileSync{out} with
               gen{data, file} + "\n"

         otherwise ->
            require: "js-beautify" -> js as beaut
            data = fs.readFileSync{file, .utf8}
            console.log with beaut{gen{data, file}}


   {.tok, s} ->
      eg.tokenize{Source{s, null}} each token ->
         <> token
         <> token.location.ref{}
         <> token.location.highlight{}

   {.pa, s} ->
      walkloc{match node} =
         #symbol{x} ->
            <> node
            <> node.location and node.location.highlight{}
         #value{x} ->
            <> node
            <> node.location and node.location.highlight{}
         {type, *args} ->
            <> node
            <> node.location and node.location.highlight{}
            args each arg -> walkloc{arg}

      walkloc with
         eg.parse{tokens} where
            tokens = eg.tokenize{Source{s, null}}

   ;; {.test, file} ->
   ;;    require: "js-beautify" -> js as beaut
   ;;    data = fs.readFileSync{file, .utf8}
   ;;    code = eg.generate2{Source{data, "<test>"}}
   ;;    ;; console.log with beaut{code}
   ;;    ;; console.log with eval{code}
   ;;    <> eval{code}

   ;; {.inspect, file} ->
   ;;    require: "js-beautify" -> js as beaut
   ;;    data = fs.readFileSync{file, .utf8}
   ;;    code = eg.generate2{Source{data, "<test>"}}
   ;;    console.log with beaut{code}

   ;; {.tests, s} ->
   ;;    require: "js-beautify" -> js as beaut
   ;;    code = eg.generate2{Source{s, "<test>"}}
   ;;    console.log with beaut{code}
   ;;    console.log with eval{code}
   ;;    <> eval{code}

   ;; {.runs, data} ->
   ;;    code = gen{data, "<command>"}
   ;;    ;; console.log with code
   ;;    ;; console.log with eval{code}
   ;;    <> eval{code}

   ;; {.trs, data} ->
   ;;    code = gen{data, "<command>"}
   ;;    ;; console.log with code
   ;;    ;; console.log with eval{code}
   ;;    <> code

   stuff ->
      usage_error with
         "Invalid use. Did you mean: earl run " + stuff.join{" "}

