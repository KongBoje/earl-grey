
require:
   "./earl-grey" as eg
   "./pp" -> [<>, Node]
   "./util" -> [enumerate, items]
   fs, path, vm

provide:
   run


usage = "
usage:

earl translate <file> [outfile]
  Translate a source file, output to outfile. Without outfile
  specified, print to standard out.

earl translate <directory> <outdir>
  Translate all the .eg files in the specified directory.

earl run [file] [arguments...]
  Run the specified file as a script.
"

walk{dir, partial, f} =
   stats = fs.statSync{dir}
   if stats.isDirectory{}:
      then:
         f{.dir, partial}
         fs.readdirSync{dir} each file ->
            walk{newdir, newpartial, f} where
               newdir = path.join{dir, file}
               newpartial = path.join{partial, file}
      else:
         f{.file, partial}

copy{src, dest} =
   data = fs.readFileSync{src, .binary}
   fs.writeFileSync{dest, data, .binary}


libdata = fs.readFileSync{path.join{__dirname, "lib.raw.js"}}

run{match} =

   {} or {.i or "in" or .interactive} ->
      require: repl
      vm.runInThisContext{libdata, "stdin"}
      settings = {
         prompt = "<> "
         ignoreUndefined = true
         eval{input, context, filename, callback} =
            result = [execute{} !! e -> handle{e}] where
               execute{} =
                  text = eg.generate{input.slice{1, -1}}
                  vm.runInThisContext{text, "stdin"}
               handle{e} =
                  console.log{e.stack or e}
                  undefined
            callback{null, result}
      }
      run = repl.start with settings
      run.on{.exit} with {} -> run.outputStream.write{"\n"}

   {.run, file} ->
      data = fs.readFileSync{file, .utf8}
      code = eg.generate{data, libdata}
      ;; vm.runInThisContext{code, file}
      eval{code}

   {.tr or .translate, file, *args} ->

      out = args[0]

      stats = fs.statSync{file}

      match:
         when stats.isDirectory{} ->
            walk{file, "/"} with {*match} ->
               {.dir, d} ->
                  from = path.join{file, d}
                  to = path.join{out, d}
                  fs.mkdirSync{to} !! "ignore error"
               {.file, match} ->
                  R'[start, {*any}, ".eg", end]? {x, name} ->
                     from = path.join{file, x}
                     to = path.join{out, name + ".js"}
                     data = fs.readFileSync{from, .utf8}
                     fs.writeFileSync{to} with
                        [eg.generate{data, ...} + "\n"] with
                           if{R'[".raw.eg", end]? x, "", libdata}
                  f ->
                     from = path.join{file, f}
                     to = path.join{out, f}
                     copy{from, to}

         when out ->
            data = fs.readFileSync{file, .utf8}
            fs.writeFileSync{out} with
               eg.generate{data, libdata} + "\n"

         otherwise ->
            data = fs.readFileSync{file, .utf8}
            console.log with eg.generate{data, ""} ;; libdata}

   {.tok, s} ->
      eg.tokenize{eg.Source{s, null}} each token ->
         <> token
         <> token.location.ref{}
         <> token.location.highlight{}

   {.pa, s} ->
      walkloc{node and match} =
         #symbol{x} ->
            <> node
            <> node.location and node.location.highlight{}
         #value{x} ->
            <> node
            <> node.location and node.location.highlight{}
         {type, *args} ->
            <> node
            <> node.location and node.location.highlight{}
            args each arg -> walkloc{arg}

      walkloc with
         eg.parse{tokens} where
            tokens = eg.tokenize{eg.Source{s, null}}

   {.runs, data} ->
      code = eg.generate{data, libdata} !!
         e and E.syntax? {args} ->
            <> div %
                  .error_type % e.name
                  .error_message % e.message
            hls = {.hl1, .hl2, .hl3, .hl4}
            locs = enumerate{items{args}} each
               {i, {key, arg}} when arg.location ->
                  {arg.location, hls[i mod 4]}
            <> args
            <> eg.highlight_locations{locs}
            null
      code and [<> eval{code}]

   other ->
      console.log with usage

